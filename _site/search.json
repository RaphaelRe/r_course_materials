[
  {
    "objectID": "intro_R.html#parts",
    "href": "intro_R.html#parts",
    "title": "Intro intro R",
    "section": "Parts",
    "text": "Parts\nCombination of\n\nSlides\n\n“lecture like”\nNew content, Theoretical part\n\nExercises\n\nHands-on\nDedicated time during the course\n“Interactive”"
  },
  {
    "objectID": "intro_R.html#why-r",
    "href": "intro_R.html#why-r",
    "title": "Intro intro R",
    "section": "Why R?",
    "text": "Why R?\nWhy R?\n\nR is open source\nAll techniques for data analyses\nState-of-the-art graphics capabilities\nA platform for programming new statistical methods or analysis pipelines (in form of R-packages)"
  },
  {
    "objectID": "intro_R.html#programming-in-general",
    "href": "intro_R.html#programming-in-general",
    "title": "Intro intro R",
    "section": "Programming (in general)",
    "text": "Programming (in general)\n“Good programmers are made, not born.” (Gerald M. Weinberg - The Psychology of Computer Programming)\n\nconsequence I\ntrain…\nconsequence II\ntrain…\nconsequence III\ntrain more\n\nHands-on is important. Understanding is less that 30%"
  },
  {
    "objectID": "intro_R.html#r-and-r-studio",
    "href": "intro_R.html#r-and-r-studio",
    "title": "Intro intro R",
    "section": "R and R Studio",
    "text": "R and R Studio\nRequired tools for the course:\n\nProgramming language R\n\ndesigned to make fast prototyping for statistical analysis\ninterpreted language\n\nRStudio (optional, but recommended)\n\nIDE tailored for R\nIntegrates a lot more (e.g. python, c++, etc.)"
  },
  {
    "objectID": "intro_R.html#r-packages",
    "href": "intro_R.html#r-packages",
    "title": "Intro intro R",
    "section": "R packages",
    "text": "R packages\n\nR comes with many useful packages by default\nHowever, the strength lies in the huge collection of external packages\nMost popular and default: CRAN\nInstall new packages in R using either\n\nusing a command:\n\ninstall.packages(\"&lt;package-name&gt;\") (e.g.install.packages(\"mvtnorm\"))\n\nRStudio\n\nusing built-in tools from the IDE"
  },
  {
    "objectID": "intro_R.html#addition-subtraction-etc",
    "href": "intro_R.html#addition-subtraction-etc",
    "title": "Intro intro R",
    "section": "Addition, subtraction, etc",
    "text": "Addition, subtraction, etc\n\n1+2\n\n[1] 3\n\n1-2\n\n[1] -1\n\n1*2\n\n[1] 2\n\n1/2\n\n[1] 0.5\n\n1^2\n\n[1] 1\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\n1/0"
  },
  {
    "objectID": "intro_R.html#special-symbols-functions",
    "href": "intro_R.html#special-symbols-functions",
    "title": "Intro intro R",
    "section": "Special symbols functions",
    "text": "Special symbols functions\nSpecial symbols\n\npi\nInf\n\nMathematical functions\n\nexp(1)\n\n[1] 2.718282\n\nlog(1)\n\n[1] 0\n\n\nSpecial cases:\n\nNaN is a data type that indicates an invalid number.\n\n\nlog(-1)\n\n[1] NaN\n\nNaN + 1\n\n[1] NaN\n\n\n\nNA is a missing value.\n\n\nNA + 1\n\n[1] NA\n\n\n\nNULL means literally empty/nothing"
  },
  {
    "objectID": "intro_R.html#assigning-objects",
    "href": "intro_R.html#assigning-objects",
    "title": "Intro intro R",
    "section": "Assigning objects",
    "text": "Assigning objects\nAssignment is done using &lt;-\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nAlternatively, use =\n\nx = sqrt(2)\ny = sqrt(2)\nx * y\n\n[1] 2\n\n\nLook at environment pane in R Studio, what can you see?"
  },
  {
    "objectID": "intro_R.html#naming-objects",
    "href": "intro_R.html#naming-objects",
    "title": "Intro intro R",
    "section": "Naming objects",
    "text": "Naming objects\n\nObjects in R have to start with a letter\n\nCase sensitive\n\na &lt;- 2\nA &lt;- 1\na-a\n\n[1] 0\n\n\nOverwrite variables with old ones\n\na &lt;- a + 1\n\nCombination of words\n\nvariable_name &lt;- 1\nvariable.name &lt;- 1\nvariableName &lt;- 1"
  },
  {
    "objectID": "intro_R.html#comments",
    "href": "intro_R.html#comments",
    "title": "Intro intro R",
    "section": "Comments",
    "text": "Comments\nSometimes it is useful, to comment code. Use a # to comment\nStandard:\n\n1+1\n\n[1] 2\n\n\nComment a line (no output):\n\n# 1+1\n\nComment after an expression (only 1+1 gets evaluated):\n\n1+1 # +1\n\n[1] 2"
  },
  {
    "objectID": "intro_R.html#function-calling",
    "href": "intro_R.html#function-calling",
    "title": "Intro intro R",
    "section": "Function calling",
    "text": "Function calling\nSo far we used expressions like f(...). This is a function. E.g.\n\nexp(2)\n\nWe call the function exp with a value of 2. Or the (natural) logarithm:\n\nlog(exp(1))\n\n[1] 1\n\n\nWe can specify the base as a second argument:\n\nlog(2, 2)\n\n[1] 1\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nLog(Exp(1))"
  },
  {
    "objectID": "intro_R.html#get-documentation",
    "href": "intro_R.html#get-documentation",
    "title": "Intro intro R",
    "section": "Get documentation",
    "text": "Get documentation\nAccess the documentation using\n\n&lt;F1&gt;\ntype ?function_name\nuse RStudio functionality\n\nE.g. documentation for log() reveals that we calculate the natural logarithm.\n\n?log\nlog(x, base = exp(1))"
  },
  {
    "objectID": "intro_R.html#function-calling-contd",
    "href": "intro_R.html#function-calling-contd",
    "title": "Intro intro R",
    "section": "Function calling cont’d",
    "text": "Function calling cont’d\nYou can ignore the argument name, when placements are clear. - We have done that for exp and log\nHence, this here\n\nlog(2, 2)\n\nmeans, that we actually call\n\nlog(x=2, base=2)\n\nIf you specify the argument, order does not matter.\nExample:\n\nlog(base=3, x=2)\nlog(3, 2)\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nlog &lt;- 1\nlog(log)"
  },
  {
    "objectID": "intro_R.html#basic-primitive-data-types",
    "href": "intro_R.html#basic-primitive-data-types",
    "title": "Intro intro R",
    "section": "Basic (primitive) data types",
    "text": "Basic (primitive) data types\nnumeric\nA (floating point) number. We used this so far (default).\n1.0, 1.34, -33, pi\n\nlogical\nA binary data type.\nTRUE, FALSE, T, F\n\ninteger\nCan be specified using an “L”.\n1L, 100L, -99L\n\ncharacter\nRepresents letters OR sentences.\n'a', \"abc\", \"May the force be with you\""
  },
  {
    "objectID": "intro_R.html#vectors-1",
    "href": "intro_R.html#vectors-1",
    "title": "Intro intro R",
    "section": "Vectors",
    "text": "Vectors\nYou can combine single values to a vector.\n\na &lt;- c(1,2,3,4)\na\n\n[1] 1 2 3 4\n\nb &lt;- c(TRUE, FALSE, TRUE)\nb\n\n[1]  TRUE FALSE  TRUE\n\nc &lt;- c(\"a\", 'ab', \"ab c\")\nc\n\n[1] \"a\"    \"ab\"   \"ab c\"\n\n\nMany operations in R are vectorized\n\na + a\n\n[1] 2 4 6 8\n\na * a\n\n[1]  1  4  9 16\n\nexp(a)\n\n[1]  2.718282  7.389056 20.085537 54.598150\n\n-a\n\n[1] -1 -2 -3 -4\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nc(\"1\",2,3)"
  },
  {
    "objectID": "intro_R.html#automatic-recycling",
    "href": "intro_R.html#automatic-recycling",
    "title": "Intro intro R",
    "section": "Automatic recycling",
    "text": "Automatic recycling\n\na &lt;- c(1,2,3,4)\na + 1\n\n[1] 2 3 4 5\n\nb &lt;- c(2,2)\na + b\n\n[1] 3 4 5 6\n\n\n\n\n\n\n\n\nWarning\n\n\nNote the behavior for for vectors with different length! Example:\n\na &lt;- c(1,2,3)\nb &lt;- c(1,2)\na + b\n\nWarning in a + b: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 4"
  },
  {
    "objectID": "intro_R.html#vector-creation",
    "href": "intro_R.html#vector-creation",
    "title": "Intro intro R",
    "section": "Vector creation",
    "text": "Vector creation\nThere are a lot of convenience functions to create vectors.\n\nc(1,2,3,4)\n\n[1] 1 2 3 4\n\n1:4\n\n[1] 1 2 3 4\n\nseq(4)\n\n[1] 1 2 3 4\n\n\nMore complex ones:\n\n4:-3\n\n[1]  4  3  2  1  0 -1 -2 -3\n\nseq(-10, 10, by = 2)\n\n [1] -10  -8  -6  -4  -2   0   2   4   6   8  10\n\nseq(-10, 10, length.out = 10) # vector of length 10\n\n [1] -10.000000  -7.777778  -5.555556  -3.333333  -1.111111   1.111111\n [7]   3.333333   5.555556   7.777778  10.000000"
  },
  {
    "objectID": "intro_R.html#select-elements-of-a-vector",
    "href": "intro_R.html#select-elements-of-a-vector",
    "title": "Intro intro R",
    "section": "Select elements of a vector",
    "text": "Select elements of a vector\nAccess elements of a vector using positional numbers within [...]:\n\nx &lt;- c(2,4,2,5)\nx[1]\n\n[1] 2\n\n\nMultiple elements\n\nselection &lt;- c(1,4)\nx[selection]\n\n[1] 2 5\n\nx[c(1,4)]\n\n[1] 2 5\n\n\nNegative values will be excluded\n\nx[-c(1,3)]\n\n[1] 4 5\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nx[1:5]\nx[-(5:10)]\nx[0]"
  },
  {
    "objectID": "intro_R.html#logical-values-for-comparison",
    "href": "intro_R.html#logical-values-for-comparison",
    "title": "Intro intro R",
    "section": "Logical values for comparison",
    "text": "Logical values for comparison\nRecall the very most basic data type logical, i.e. TRUE and FALSE.\n\nWe can create such an object by comparison:\n\n\n1 == 2  # lhs equal rhs?\n\n[1] FALSE\n\n1 != 2  # lhs unequal rhs?\n\n[1] TRUE\n\n1 &gt; 2  # lhs larger rhs?\n\n[1] FALSE\n\n1 &gt;= 2  # lhs larger or equal rhs?\n\n[1] FALSE\n\n1 &lt; 2  # lhs less than rhs?\n\n[1] TRUE\n\n1 &lt;= 2  # lhs less or equal than rhs?\n\n[1] TRUE\n\n\nSwap value:\n\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\n1 == \"1\"\n1 != NaN \nNA == NA  # we will learn the solution in a few slides"
  },
  {
    "objectID": "intro_R.html#filter-elements-of-a-vector",
    "href": "intro_R.html#filter-elements-of-a-vector",
    "title": "Intro intro R",
    "section": "Filter elements of a vector",
    "text": "Filter elements of a vector\nComparison operators are vectorized:\n\nc(T,F,T) == c(F,F,T)  # element-wise comparison\n\n[1] FALSE  TRUE  TRUE\n\n\nCheck condition on a numeric vector\n\nx &lt;- c(2,4,2,5)\nposition_two &lt;- x == 2  # logical vector showing, where the condition holds\nposition_two\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\nUse logical values to filter a vector.\n\nx[position_two]\n\n[1] 2 2\n\n# or dictly\nx[x == 2]\n\n[1] 2 2\n\n\nFilter for values less than 3\n\nx[x &lt; 3]\n\n[1] 2 2"
  },
  {
    "objectID": "intro_R.html#combine-filters-with-and",
    "href": "intro_R.html#combine-filters-with-and",
    "title": "Intro intro R",
    "section": "Combine filters with & and |",
    "text": "Combine filters with & and |\nCombination operations…\n\nTRUE & TRUE\n\n[1] TRUE\n\nFALSE & TRUE\n\n[1] FALSE\n\nTRUE | TRUE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\n\n…or vectorized\n\nx &lt;- c(T,F,T,F)\ny &lt;- c(T,T,F,F)\nx & y\n\n[1]  TRUE FALSE FALSE FALSE\n\nx | y\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\nUse this to filter a vector for multiple conditions\n\nx[(x &lt; 5) & (x &gt; 2)]\n\nlogical(0)"
  },
  {
    "objectID": "intro_R.html#assign-new-values-in-a-vector",
    "href": "intro_R.html#assign-new-values-in-a-vector",
    "title": "Intro intro R",
    "section": "Assign new values in a vector",
    "text": "Assign new values in a vector\nWe can assign new values to a vector using a combination of selection and assignment\n\nx &lt;- 1:5\nx[1] &lt;- 2\nx\n\n[1] 2 2 3 4 5\n\nx[x &gt; 3] &lt;- -99\nx\n\n[1]   2   2   3 -99 -99\n\nx[-1] &lt;- 100\nx\n\n[1]   2 100 100 100 100\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nx[100] &lt;- 1"
  },
  {
    "objectID": "intro_R.html#vector-operations",
    "href": "intro_R.html#vector-operations",
    "title": "Intro intro R",
    "section": "Vector operations",
    "text": "Vector operations\n\nx &lt;- c(1,1,2,3)\nlength(x)\n\n[1] 4\n\nappend(x, c(1,2,3))\n\n[1] 1 1 2 3 1 2 3\n\nrev(x)\n\n[1] 3 2 1 1\n\nsort(x)\n\n[1] 1 1 2 3\n\nunique(x)\n\n[1] 1 2 3\n\nsum(x) \n\n[1] 7"
  },
  {
    "objectID": "intro_R.html#factors",
    "href": "intro_R.html#factors",
    "title": "Intro intro R",
    "section": "Factors",
    "text": "Factors\nConsider a vector, that represents a categorical variable. Let’s say colors.\n\ncolors &lt;- c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\")\ncolors\n\n[1] \"blue\"  \"red\"   \"blue\"  \"red\"   \"green\" \"black\" \"green\" \"white\"\n\n\nWe cast colors into a factor now:\n\ncolors &lt;- as.factor(colors)\ncolors\n\n[1] blue  red   blue  red   green black green white\nLevels: black blue green red white\n\nlevels(colors)\n\n[1] \"black\" \"blue\"  \"green\" \"red\"   \"white\"\n\nas.numeric(colors)\n\n[1] 2 4 2 4 3 1 3 5\n\nclass(colors)\n\n[1] \"factor\"\n\ntypeof(colors)\n\n[1] \"integer\"\n\n\nHence, a vector of integeres where each value corresponds to a character value."
  },
  {
    "objectID": "intro_R.html#complex-data-structures",
    "href": "intro_R.html#complex-data-structures",
    "title": "Intro intro R",
    "section": "Complex data structures",
    "text": "Complex data structures\n\nfrom Ceballos and Cardiel, (2013). Data structure – First Steps in R. Retreived 25-11-2018 from http:// venus.ifca.unican.es/ Rintro.2024\nUse str(...) to inspect the structure of complex data types!"
  },
  {
    "objectID": "intro_R.html#vector-matrix-array",
    "href": "intro_R.html#vector-matrix-array",
    "title": "Intro intro R",
    "section": "Vector, Matrix, Array",
    "text": "Vector, Matrix, Array\nWe already got vectors. Lets combine them:\n\nx &lt;- 1:4\n(x_rbind &lt;- cbind(x,x)) # 4 rows, 2 columns\n\n     x x\n[1,] 1 1\n[2,] 2 2\n[3,] 3 3\n[4,] 4 4\n\n(x_cbind &lt;- rbind(x,x)) # 2 rows, 4 columns\n\n  [,1] [,2] [,3] [,4]\nx    1    2    3    4\nx    1    2    3    4\n\ndim(x_rbind)\n\n[1] 4 2\n\ndim(x_cbind)\n\n[1] 2 4\n\nnrow(x_rbind)\n\n[1] 4\n\nncol(x_rbind)\n\n[1] 2"
  },
  {
    "objectID": "intro_R.html#vector-matrix-array-contd",
    "href": "intro_R.html#vector-matrix-array-contd",
    "title": "Intro intro R",
    "section": "Vector, Matrix, Array cont’d",
    "text": "Vector, Matrix, Array cont’d\nWe can define a matrix using the matrix function:\n\nmatrix(1:6, nrow = 3, ncol = 2)\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\nmatrix(1:6, nrow = 3, ncol = 2, byrow = T)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\n\nArrays as a generalization with multiple dimensions\n\narray(1:12, dim = c(3,2,2))\n\n, , 1\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n, , 2\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\n\nThis is also sometimes called a tensor."
  },
  {
    "objectID": "intro_R.html#selectfilter-elements-on-arrays",
    "href": "intro_R.html#selectfilter-elements-on-arrays",
    "title": "Intro intro R",
    "section": "Select/filter elements on Arrays",
    "text": "Select/filter elements on Arrays\nAs vectors, we can select and filter. Seperate dimensions with a ,, i.e. [... , ...]\n\n(m &lt;- matrix(1:6, nrow = 3, ncol = 2))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\nm[2,2]\n\n[1] 5\n\nm[nrow(m), ncol(m) ]\n\n[1] 6\n\n\nDefining no entry will return the full dimension:\n\nm[2,]\n\n[1] 2 5\n\nm[,1]\n\n[1] 1 2 3\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nm[1,,2]\nm[10]"
  },
  {
    "objectID": "intro_R.html#list",
    "href": "intro_R.html#list",
    "title": "Intro intro R",
    "section": "List",
    "text": "List\nA list is a collection of elements. These elements could be any object.\n\n(l &lt;- list(1, \"2\", 1:3, list(m)))\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] 1 2 3\n\n[[4]]\n[[4]][[1]]\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nAccess elements of a list with [[...]].\n\nl[[2]]\n\n[1] \"2\"\n\n\nA sub-list can be accessed with [...].\n\nl[1:3]\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] 1 2 3"
  },
  {
    "objectID": "intro_R.html#list-contd",
    "href": "intro_R.html#list-contd",
    "title": "Intro intro R",
    "section": "List cont’d",
    "text": "List cont’d\nYou can define names for lists:\n\nl &lt;- list(slot1 = 1:3, slot2 = c(\"a\", \"b\"), slot3 = l)\nnames(l)\n\n[1] \"slot1\" \"slot2\" \"slot3\"\n\n\nAccess list elements using the name and a $:\n\nl$slot3 # return the original list l before overwriting it\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] 1 2 3\n\n[[4]]\n[[4]][[1]]\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nDelete elements by assigning a NULL to a slot\n\nl[2:3] &lt;- NULL\nl\n\n$slot1\n[1] 1 2 3"
  },
  {
    "objectID": "intro_R.html#data-frame",
    "href": "intro_R.html#data-frame",
    "title": "Intro intro R",
    "section": "Data Frame",
    "text": "Data Frame\nA data frame is basically a list, where each element is a vector of the same length. However, it implements function to handle it as a matrix.\nLet’s define a data set representing cars:\n\ncol &lt;- as.factor(c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\"))\npri &lt;- c(10, 20, 9, 50, 0.4, 15, 160, 60) * 1000\nis_el &lt;- c(F,F,F,T,F,T,F,T)\n\ncar_ds &lt;- data.frame(color = col, price = pri, is_electric = is_el)\ncar_ds\n\n  color  price is_electric\n1  blue  10000       FALSE\n2   red  20000       FALSE\n3  blue   9000       FALSE\n4   red  50000        TRUE\n5 green    400       FALSE\n6 black  15000        TRUE\n7 green 160000       FALSE\n8 white  60000        TRUE\n\nstr(car_ds)\n\n'data.frame':   8 obs. of  3 variables:\n $ color      : Factor w/ 5 levels \"black\",\"blue\",..: 2 4 2 4 3 1 3 5\n $ price      : num  10000 20000 9000 50000 400 15000 160000 60000\n $ is_electric: logi  FALSE FALSE FALSE TRUE FALSE TRUE ..."
  },
  {
    "objectID": "intro_R.html#data-frame-contd",
    "href": "intro_R.html#data-frame-contd",
    "title": "Intro intro R",
    "section": "Data Frame cont’d",
    "text": "Data Frame cont’d\nWe can work on a data set as we work with a matrix\n\n# All rows with red cars\ncar_ds[car_ds$color == \"red\", ]\n\n  color price is_electric\n2   red 20000       FALSE\n4   red 50000        TRUE\n\n# price of all black cars\ncar_ds[car_ds$color == \"black\", \"price\"]\n\n[1] 15000\n\n# set a new price for the last car in the ds\ncar_ds[8, 2] &lt;- 600\ncar_ds\n\n  color  price is_electric\n1  blue  10000       FALSE\n2   red  20000       FALSE\n3  blue   9000       FALSE\n4   red  50000        TRUE\n5 green    400       FALSE\n6 black  15000        TRUE\n7 green 160000       FALSE\n8 white    600        TRUE"
  },
  {
    "objectID": "intro_R.html#more-on-data-structures",
    "href": "intro_R.html#more-on-data-structures",
    "title": "Intro intro R",
    "section": "More on data structures",
    "text": "More on data structures\n\nA data frame behaves like a matrix.\nHowever, keep in mind that it is actually a list. We can easily prove that:\n\n\nis.list(car_ds)\n\n[1] TRUE\n\n\nUse str(...) to check the data structure of any object:\n\nstr(car_ds)\n\n'data.frame':   8 obs. of  3 variables:\n $ color      : Factor w/ 5 levels \"black\",\"blue\",..: 2 4 2 4 3 1 3 5\n $ price      : num  10000 20000 9000 50000 400 15000 160000 600\n $ is_electric: logi  FALSE FALSE FALSE TRUE FALSE TRUE ...\n\nm &lt;- matrix(1:4, ncol = 2)\nstr(m)\n\n int [1:2, 1:2] 1 2 3 4"
  },
  {
    "objectID": "intro_R.html#load-data",
    "href": "intro_R.html#load-data",
    "title": "Intro intro R",
    "section": "Load data",
    "text": "Load data\nWe can load a data set from a package using data(...).\n\ndata(\"iris\", package = \"datasets\")  # look in the environment variables\n\nWe can load data from files. Use read.table(...), or wrapper functions with reasonable default values. E.g. We can read a file directly from the web:\n\nd &lt;- read.csv(\"https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/mtcars.csv\")\nhead(d)  # show the first few lines of a data set\n\n           rownames  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nNote, that we can also use this to read a data set from a local directory! To do that we have to specify either the full path or define the path from the working directory. Use getwd(...) and setwd(...) to get or set the current working directory. See next slide for an example."
  },
  {
    "objectID": "intro_R.html#save-data-sets",
    "href": "intro_R.html#save-data-sets",
    "title": "Intro intro R",
    "section": "Save data sets",
    "text": "Save data sets\nConsider a data set, you have worked with. You can save it using write functions.\n\nwrite.csv(car_ds, file = \"example_data.csv\")  # we save our data set in the current working directory\n\nWe can again read the data as a new object:\n\nd_loaded &lt;- read.csv(\"example_data.csv\")\n\nall.equal(car_ds,d_loaded)  # test whether 2 (more complex) R object are the same\n\n[1] \"Names: 3 string mismatches\"                          \n[2] \"Length mismatch: comparison on first 3 components\"   \n[3] \"Component 1: 'current' is not a factor\"              \n[4] \"Component 2: Modes: numeric, character\"              \n[5] \"Component 2: target is numeric, current is character\"\n[6] \"Component 3: Modes: logical, numeric\"                \n[7] \"Component 3: target is logical, current is numeric\"  \n\n\nWe can read other files as well. E.g. excel, SPSS, SAS, etc.\nThere are a lot of packages to do that.\nI use the function load(...) from the rio package that tries to unify a lot of different formats.)"
  },
  {
    "objectID": "intro_R.html#save-and-load-r-objects",
    "href": "intro_R.html#save-and-load-r-objects",
    "title": "Intro intro R",
    "section": "Save and load R objects",
    "text": "Save and load R objects\nSo far, we only worked with data frames for read and write operations. We can save general R objects using save(...) and load(...) using the .RData format.\n\na_list &lt;- list(a = 42, data = iris, comment = \"whatever\")\n\nsave(a_list, file = \"example_object.RData\")\n\nload(\"example_object.RData\")\n\n\n\n\nIntro intro R"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slides for the course",
    "section": "",
    "text": "Click on the title to open the slides in full screen\n\n\nIntro into R\n\n\n\n\nControl flows\n\n\n\n\nggplot\n\n\n\n\ndplyr and data.table\n\n\n\n\nR Markdown"
  },
  {
    "objectID": "Exercises.html",
    "href": "Exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "About this site\nback"
  },
  {
    "objectID": "control_flows.html#functions-so-far",
    "href": "control_flows.html#functions-so-far",
    "title": "Control flows and programming",
    "section": "Functions so far…",
    "text": "Functions so far…\nSo far, we called functions, to do things for us. E.g.\n\nx &lt;- 1:5\nsin(x)\n\n[1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243\n\nlog(x, base=2)\n\n[1] 0.000000 1.000000 1.584963 2.000000 2.321928\n\nsum(x)\n\n[1] 15\n\n\nWe also used functions to create data frames, inspect objects or load/save data. E.g.\n\ndata(mtcars, package = \"datasets\")\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ..."
  },
  {
    "objectID": "control_flows.html#defining-own-functions",
    "href": "control_flows.html#defining-own-functions",
    "title": "Control flows and programming",
    "section": "Defining own functions",
    "text": "Defining own functions\nWe can write our own functions, if we need one. In mathematical terms, this is obvious:\nConsider a function \\(f(x) = x^2 + cos(x) + 2\\).\nWe can automate the evaluation using our own defined function.\n\nour_function &lt;- function(x){\n  y &lt;- x^2 + cos(x*3)*2 + 2\n  return(y)\n}\n\nNote the return(...) statement at the end of the function\nWe can now use the function to calcualte the result for given values.\n\nx &lt;- seq(-2,2, length.out = 10)\ny &lt;- our_function(x)\ny\n\n [1] 7.920341 4.328340 1.271220 1.612151 3.621157 3.621157 1.612151 1.271220\n [9] 4.328340 7.920341"
  },
  {
    "objectID": "control_flows.html#defining-own-functions-contd",
    "href": "control_flows.html#defining-own-functions-contd",
    "title": "Control flows and programming",
    "section": "Defining own functions cont’d",
    "text": "Defining own functions cont’d\nWe can generalize this concept to arbitrary inputs (not only numerical). Here are two examples:\n\n# Combine three arguments and returns a list with all combinations concatenated\nfunction1 &lt;- function(x, y, z){\n  element1 &lt;- c(x,y)\n  element2 &lt;- c(x,z)\n  element3 &lt;- c(y, z)\n  element4 &lt;- c(x, y, z)\n  \n  return(list(element1, element2, element3, element4))\n}\n\nfunction1(1,2,3)\n\n[[1]]\n[1] 1 2\n\n[[2]]\n[1] 1 3\n\n[[3]]\n[1] 2 3\n\n[[4]]\n[1] 1 2 3\n\nfunction1(\"a\", \"b\", \"c\")\n\n[[1]]\n[1] \"a\" \"b\"\n\n[[2]]\n[1] \"a\" \"c\"\n\n[[3]]\n[1] \"b\" \"c\"\n\n[[4]]\n[1] \"a\" \"b\" \"c\"\n\n# A function, that sum up the columns and rows of a matrix with additional info\nfunction2 &lt;- function(m){\n  print(\"Dimension of input matrix:\")\n  print(dim(m))\n  \n  rs &lt;- rowSums(m)\n  cs &lt;- colSums(m)\n  s &lt;- sum(m)\n  \n  return(list(RowSums = rs, ColSums = cs, FullSum = s))\n}\n\nm1 &lt;- matrix(1:9, 3,3)\nm2 &lt;- matrix(-100:100, 100,2)\n\nfunction2(m1)\n\n[1] \"Dimension of input matrix:\"\n[1] 3 3\n\n\n$RowSums\n[1] 12 15 18\n\n$ColSums\n[1]  6 15 24\n\n$FullSum\n[1] 45\n\nfunction2(m2)\n\n[1] \"Dimension of input matrix:\"\n[1] 100   2\n\n\n$RowSums\n  [1] -100  -98  -96  -94  -92  -90  -88  -86  -84  -82  -80  -78  -76  -74  -72\n [16]  -70  -68  -66  -64  -62  -60  -58  -56  -54  -52  -50  -48  -46  -44  -42\n [31]  -40  -38  -36  -34  -32  -30  -28  -26  -24  -22  -20  -18  -16  -14  -12\n [46]  -10   -8   -6   -4   -2    0    2    4    6    8   10   12   14   16   18\n [61]   20   22   24   26   28   30   32   34   36   38   40   42   44   46   48\n [76]   50   52   54   56   58   60   62   64   66   68   70   72   74   76   78\n [91]   80   82   84   86   88   90   92   94   96   98\n\n$ColSums\n[1] -5050  4950\n\n$FullSum\n[1] -100"
  },
  {
    "objectID": "control_flows.html#if-else-statement",
    "href": "control_flows.html#if-else-statement",
    "title": "Control flows and programming",
    "section": "If-else statement",
    "text": "If-else statement\nConsider a function that should do something. However, it depends on the input type.\n\n# function should sum up the values. If it is of type character, it should just paste everythign together\ntyped_sum &lt;- function(x){\n  if (class(x) == \"character\") {\n    ret &lt;- paste(x, collapse = \" \")\n  } else {\n    ret &lt;- sum(x)\n  }\n  return(ret)\n}\n  \ntyped_sum(1:5)\n\n[1] 15\n\ntyped_sum(c(\"This\", \"will\", \"be\", \"one\", \"sentence\"))\n\n[1] \"This will be one sentence\"\n\n\n\nThe else {...} is optional.\nIf more conditions are required, one can use else if {...}"
  },
  {
    "objectID": "control_flows.html#for-loops",
    "href": "control_flows.html#for-loops",
    "title": "Control flows and programming",
    "section": "For loops",
    "text": "For loops\nSo far, we can automate code now using functions. But we can automate even more using a loop!\nAn short example:\n\nx &lt;- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in x) {\n  print(i)  # print each element of a vector on after another\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nA more complex example:\nLet’s calculate the Fibonacci sequence until 10.\n\na &lt;- rep(0, 10) # this is a container where we will store the solution\na[2] &lt;- 1\n\n# here we need a for loop because we must access the two arguments calculated in the steps before\nfor (i in 3:10) {\n  a[i] &lt;- a[i-2] + a[i-1]\n}\na\n\n [1]  0  1  1  2  3  5  8 13 21 34"
  },
  {
    "objectID": "control_flows.html#while-loops",
    "href": "control_flows.html#while-loops",
    "title": "Control flows and programming",
    "section": "while loops",
    "text": "while loops\nWe can also repeat operations until a defined condition is met.\nIn this example, we sum the elements in a vector until they exceed 100. We also print the number of used elements.\n\nx &lt;- c(11, 20, 1, 44, 99, 2000, 100)\n\ndynamic_sum &lt;- 0\ni &lt;- 1\nwhile (dynamic_sum &lt; 100) {\n  i &lt;- i + 1\n  dynamic_sum &lt;- sum(x[1:i])\n}\nprint(paste(\"Used elements of the vector:\", i))\n\n[1] \"Used elements of the vector: 5\"\n\nprint(paste(\"Sum is:\", dynamic_sum))\n\n[1] \"Sum is: 175\"\n\n\nNote that you can use loops in functions as well"
  },
  {
    "objectID": "control_flows.html#lapply",
    "href": "control_flows.html#lapply",
    "title": "Control flows and programming",
    "section": "lapply",
    "text": "lapply\n\nConsider an operation, that you want to apply to each element of a list. You have 3 options: Write code for each list element\nIterate over all list elements and call a function to with each element , i.e. in each iteration\nApply the function to each element directly"
  },
  {
    "objectID": "control_flows.html#lapply-examples",
    "href": "control_flows.html#lapply-examples",
    "title": "Control flows and programming",
    "section": "lapply examples",
    "text": "lapply examples\nEasy example:\n\nl &lt;- list(1:5, 1:100, 1:1000)\nlapply(l, sum)  # calculate the sum of each element\n\n[[1]]\n[1] 15\n\n[[2]]\n[1] 5050\n\n[[3]]\n[1] 500500\n\n\nData frames are just lists! So we can use this fact here. We may calculate the maximum value of each column.\n\nstr(iris) # iris data set has a factor. max() is not meaningful on factors.\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nlapply(iris[, 1:4], max)\n\n$Sepal.Length\n[1] 7.9\n\n$Sepal.Width\n[1] 4.4\n\n$Petal.Length\n[1] 6.9\n\n$Petal.Width\n[1] 2.5"
  },
  {
    "objectID": "control_flows.html#sapply",
    "href": "control_flows.html#sapply",
    "title": "Control flows and programming",
    "section": "sapply",
    "text": "sapply\nsapply is basically the same as lapply, but tries to simplify the result. In our last example, this makes sense: Each element is just a number.\n\nsapply(iris[, 1:4], max)\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n         7.9          4.4          6.9          2.5"
  },
  {
    "objectID": "control_flows.html#apply",
    "href": "control_flows.html#apply",
    "title": "Control flows and programming",
    "section": "apply",
    "text": "apply\nThere is a basic apply function. It is intended to apply a function on an array. We have to specify the margin. This defines, on which axis, the function should be applied.\n\n(m &lt;- matrix(1:6, 3, 2))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\napply(m, MARGIN = 1, FUN = sum)  # rowsums\n\n[1] 5 7 9\n\napply(m, MARGIN = 2, FUN = sum)   # colsums\n\n[1]  6 15\n\napply(m, MARGIN = 1:2, FUN = sum)  # sum on each element\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\n\n\n\n\n\nWarning\n\n\nApply on data frames will cast a data frame into a matrix with (as.matrix/array!)"
  },
  {
    "objectID": "control_flows.html#other-apply-functions",
    "href": "control_flows.html#other-apply-functions",
    "title": "Control flows and programming",
    "section": "Other apply functions",
    "text": "Other apply functions\nThere are a lot of other apply functions. To name some of them:\n\nmapply (apply a function to multiple vectors/lists)\ntapply (apply over ragged vectors)\npbapply (adds a progress bar, package: pbapply)\nmclapply (parallel version of lapply, package: parallel)\n\n\n\n\nControl flows and programming"
  },
  {
    "objectID": "dplyr_datatable.html#basics",
    "href": "dplyr_datatable.html#basics",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Basics",
    "text": "Basics\ndplyr is an R package that implements an advanced version of standard data frames\nFrom the official website:\n“dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges”\n\nPart of the `tidyverse` (package collection)\n\nlibrary(dplyr)"
  },
  {
    "objectID": "dplyr_datatable.html#pipe",
    "href": "dplyr_datatable.html#pipe",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "pipe %>%",
    "text": "pipe %&gt;%\nThe %&gt;% is an operator to concatenate function calls. Originally from the `magrittr` package.\nA short example will show this merits:\n\nTake a list of numbers.\nSquare each number.\nSum the squared values.\n\n\n# Without using pipe operator\n\nsum(sapply(list(1, 2, 3, 4),function(x) x^2))\n\n[1] 30\n\n\n\n# Use pipe\nlist(1, 2, 3, 4) %&gt;%\n  sapply(function(x) x^2) %&gt;%\n  sum()\n\n[1] 30\n\n\nThere is a keyboard shortcut to insert the pip. On my config, it is Ctrl + Shift + m`\nThe pipe was so popular, that there is an official implementation in base R (`|&gt;`). However, I prefer %&gt;% for reasons…"
  },
  {
    "objectID": "dplyr_datatable.html#tibble",
    "href": "dplyr_datatable.html#tibble",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "tibble",
    "text": "tibble\nHere, we use the starwars data set from the dplyr package.\n\nhead(starwars)\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\nData class is now `tibble`\nSlightly more informative than standard data frame\nWe can define a tibble by using the according function, e.g. tibble(iris)\nA tibble behaves like a standard data frame (e.g. is is still list-like)"
  },
  {
    "objectID": "dplyr_datatable.html#basic-operations",
    "href": "dplyr_datatable.html#basic-operations",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Basic operations",
    "text": "Basic operations\nSelect rows and columns\n\nWe can use filter to select rows with defined conditions\nWe can use select to select columns\n\n\nstarwars %&gt;% \n  filter(height &gt; 170, mass &lt; 130) %&gt;%\n  select(name, homeworld)\n\n# A tibble: 37 × 2\n   name              homeworld \n   &lt;chr&gt;             &lt;chr&gt;     \n 1 Luke Skywalker    Tatooine  \n 2 Owen Lars         Tatooine  \n 3 Biggs Darklighter Tatooine  \n 4 Obi-Wan Kenobi    Stewjon   \n 5 Anakin Skywalker  Tatooine  \n 6 Chewbacca         Kashyyyk  \n 7 Han Solo          Corellia  \n 8 Greedo            Rodia     \n 9 Jek Tono Porkins  Bestine IV\n10 Boba Fett         Kamino    \n# ℹ 27 more rows\n\n\n\nNote that we can call variables from the data set without $"
  },
  {
    "objectID": "dplyr_datatable.html#basic-operations-1",
    "href": "dplyr_datatable.html#basic-operations-1",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Basic operations",
    "text": "Basic operations\nDefine new variables\n\nWe can use mutate to define new variables\n\n\nstarwars %&gt;% \n  mutate(bmi = mass / (height/100)^2) \n\n# A tibble: 87 × 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 6 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;, bmi &lt;dbl&gt;\n\n\n\nNote that we returned the data here!\nHence, no inplace operation. Use &lt;- or %&lt;&gt;% to for an assigment"
  },
  {
    "objectID": "dplyr_datatable.html#group-and-summary-operations",
    "href": "dplyr_datatable.html#group-and-summary-operations",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Group and summary operations",
    "text": "Group and summary operations\n\nUse group_by to make a operations on subgroups\nUse summarise to summarize variables\nSort results using arrange and possibly desc\n\nQuestion: What is the mean height and weight for each species? Sort the result by weight in descending order.\n\nstarwars %&gt;% \n  group_by(species) %&gt;% \n  summarise(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE),\n  ) %&gt;% \n  arrange(desc(mean_weight))\n\n# A tibble: 38 × 3\n   species      mean_height mean_weight\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hutt                 175        1358\n 2 Kaleesh              216         159\n 3 Wookiee              231         124\n 4 Trandoshan           190         113\n 5 Besalisk             198         102\n 6 Neimodian            191          90\n 7 Kaminoan             221          88\n 8 Nautolan             196          87\n 9 Mon Calamari         180          83\n10 Cerean               198          82\n# ℹ 28 more rows"
  },
  {
    "objectID": "dplyr_datatable.html#a-lot-more",
    "href": "dplyr_datatable.html#a-lot-more",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "A lot more…",
    "text": "A lot more…\nWe can only scratch on the surface. See the webpage for more examples:\nhttps://dplyr.tidyverse.org/index.html"
  },
  {
    "objectID": "dplyr_datatable.html#data.-table",
    "href": "dplyr_datatable.html#data.-table",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "data. table",
    "text": "data. table\n\ndata.table is used for large data sets and is designed to be fast and memory efficient.\nLike a tibble, it is a ‘list-like’ object.\nWe stick to the starwars data set:\n\nlibrary(data.table)\n\nsw_dt &lt;- starwars\nsetDT(sw_dt)\nhead(sw_dt)\n\n             name height  mass  hair_color  skin_color eye_color birth_year\n           &lt;char&gt;  &lt;int&gt; &lt;num&gt;      &lt;char&gt;      &lt;char&gt;    &lt;char&gt;      &lt;num&gt;\n1: Luke Skywalker    172    77       blond        fair      blue       19.0\n2:          C-3PO    167    75        &lt;NA&gt;        gold    yellow      112.0\n3:          R2-D2     96    32        &lt;NA&gt; white, blue       red       33.0\n4:    Darth Vader    202   136        none       white    yellow       41.9\n5:    Leia Organa    150    49       brown       light     brown       19.0\n6:      Owen Lars    178   120 brown, grey       light      blue       52.0\n      sex    gender homeworld species\n   &lt;char&gt;    &lt;char&gt;    &lt;char&gt;  &lt;char&gt;\n1:   male masculine  Tatooine   Human\n2:   none masculine  Tatooine   Droid\n3:   none masculine     Naboo   Droid\n4:   male masculine  Tatooine   Human\n5: female  feminine  Alderaan   Human\n6:   male masculine  Tatooine   Human\n                                                                                                                   films\n                                                                                                                  &lt;list&gt;\n1:                           A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith,The Force Awakens\n2:     A New Hope,The Empire Strikes Back,Return of the Jedi,The Phantom Menace,Attack of the Clones,Revenge of the Sith\n3: A New Hope,The Empire Strikes Back,Return of the Jedi,The Phantom Menace,Attack of the Clones,Revenge of the Sith,...\n4:                                             A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith\n5:                           A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith,The Force Awakens\n6:                                                                   A New Hope,Attack of the Clones,Revenge of the Sith\n                            vehicles               starships\n                              &lt;list&gt;                  &lt;list&gt;\n1: Snowspeeder,Imperial Speeder Bike X-wing,Imperial shuttle\n2:                                                          \n3:                                                          \n4:                                           TIE Advanced x1\n5:             Imperial Speeder Bike                        \n6:                                                          \n\n\ndata.table implements the function fread for fast and easy file reading."
  },
  {
    "objectID": "dplyr_datatable.html#general-syntax",
    "href": "dplyr_datatable.html#general-syntax",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "general syntax",
    "text": "general syntax\ndata.table uses as basic syntac\n\nDT[i, j, by]\n\nwith an analogy to SQL:\n\nDT[where | order by,  select | update ,  group by]\n\n\ni to filter rows or order\nj to select columns OR create new ones\nby to do it for subgroups\n\n\n\n\n\n\n\nWarning\n\n\nWrap j in a list() or its alias in DT .() to ensure a data table object! \\(\\rightarrow\\) see exercise."
  },
  {
    "objectID": "dplyr_datatable.html#example-from-before",
    "href": "dplyr_datatable.html#example-from-before",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Example from before",
    "text": "Example from before\ndplyr\n\nstarwars %&gt;% \n  filter(height &gt; 170, mass &lt; 130) %&gt;%\n  select(name, homeworld)\n\ndata.table\n\nsw_dt[height &gt; 170 & mass &lt; 130, .(name, homeworld)]\n\n                 name      homeworld\n               &lt;char&gt;         &lt;char&gt;\n 1:    Luke Skywalker       Tatooine\n 2:         Owen Lars       Tatooine\n 3: Biggs Darklighter       Tatooine\n 4:    Obi-Wan Kenobi        Stewjon\n 5:  Anakin Skywalker       Tatooine\n 6:         Chewbacca       Kashyyyk\n 7:          Han Solo       Corellia\n 8:            Greedo          Rodia\n 9:  Jek Tono Porkins     Bestine IV\n10:         Boba Fett         Kamino\n11:             Bossk      Trandosha\n12:  Lando Calrissian        Socorro\n13:             Lobot         Bespin\n14:            Ackbar       Mon Cala\n15:      Qui-Gon Jinn           &lt;NA&gt;\n16:       Nute Gunray Cato Neimoidia\n17:     Padmé Amidala          Naboo\n18:     Jar Jar Binks          Naboo\n19:      Roos Tarpals          Naboo\n20:        Darth Maul       Dathomir\n21:       Ayla Secura         Ryloth\n22:        Mace Windu     Haruun Kal\n23:      Ki-Adi-Mundi          Cerea\n24:         Kit Fisto    Glee Anselm\n25:        Adi Gallia      Coruscant\n26:          Plo Koon          Dorin\n27:      Gregar Typho          Naboo\n28: Poggle the Lesser       Geonosis\n29:             Dooku        Serenno\n30:        Jango Fett   Concord Dawn\n31:   Dexter Jettster           Ojom\n32:           Lama Su         Kamino\n33:        Wat Tambor          Skako\n34:          Shaak Ti          Shili\n35:   Raymus Antilles       Alderaan\n36:         Sly Moore         Umbara\n37:        Tion Medon         Utapau\n                 name      homeworld\n\n# sw_dt[height &gt; 170 & mass &lt; 130, list(name, homeworld)]  # the same"
  },
  {
    "objectID": "dplyr_datatable.html#special-argument-.n",
    "href": "dplyr_datatable.html#special-argument-.n",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Special argument .N",
    "text": "Special argument .N\n\ndata.table uses .N to count rows (in a group)\n\n\nstarwars[species == \"Human\", .N]  # 35 humans in the data set\n\n[1] 35\n\n\n\nwe can combine it with by to count the number in each group\n\n\nhead(starwars[,.N, by = species])\n\n   species     N\n    &lt;char&gt; &lt;int&gt;\n1:   Human    35\n2:   Droid     6\n3: Wookiee     2\n4:  Rodian     1\n5:    Hutt     1\n6:    &lt;NA&gt;     4"
  },
  {
    "objectID": "dplyr_datatable.html#more-complex-example-from-before",
    "href": "dplyr_datatable.html#more-complex-example-from-before",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "More complex example from before",
    "text": "More complex example from before\n\nstarwars %&gt;% \n  group_by(species) %&gt;% \n  summarise(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE),\n  ) %&gt;% \n  arrange(desc(mean_weight))\n\n# A tibble: 38 × 3\n   species      mean_height mean_weight\n   &lt;chr&gt;              &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hutt                 175        1358\n 2 Kaleesh              216         159\n 3 Wookiee              231         124\n 4 Trandoshan           190         113\n 5 Besalisk             198         102\n 6 Neimodian            191          90\n 7 Kaminoan             221          88\n 8 Nautolan             196          87\n 9 Mon Calamari         180          83\n10 Cerean               198          82\n# ℹ 28 more rows\n\n\n\nGiving the list in j names to return a data.table with according names.\nWe use the fact that the returned object is a data table\n\n\nsw_dt[,.(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE)\n), by = species][order(-mean_weight),]\n\n           species mean_height mean_weight\n            &lt;char&gt;       &lt;num&gt;       &lt;num&gt;\n 1:           Hutt    175.0000     1358.00\n 2:        Kaleesh    216.0000      159.00\n 3:        Wookiee    231.0000      124.00\n 4:     Trandoshan    190.0000      113.00\n 5:       Besalisk    198.0000      102.00\n 6:      Neimodian    191.0000       90.00\n 7:       Kaminoan    221.0000       88.00\n 8:       Nautolan    196.0000       87.00\n 9:   Mon Calamari    180.0000       83.00\n10:         Cerean    198.0000       82.00\n11:          Human    178.0000       81.31\n12:           &lt;NA&gt;    175.0000       81.00\n13:         Zabrak    173.0000       80.00\n14:        Kel Dor    188.0000       80.00\n15:      Geonosian    183.0000       80.00\n16:         Pau'an    206.0000       80.00\n17:         Rodian    173.0000       74.00\n18:         Gungan    208.6667       74.00\n19:          Droid    131.2000       69.75\n20:      Sullustan    160.0000       68.00\n21:          Toong    163.0000       65.00\n22:        Togruta    178.0000       57.00\n23:        Twi'lek    179.0000       55.00\n24:       Clawdite    168.0000       55.00\n25:       Mirialan    168.0000       53.10\n26:     Tholothian    184.0000       50.00\n27:        Skakoan    193.0000       48.00\n28:     Vulptereen     94.0000       45.00\n29:            Dug    112.0000       40.00\n30:           Ewok     88.0000       20.00\n31: Yoda's species     66.0000       17.00\n32:         Aleena     79.0000       15.00\n33:      Toydarian    137.0000         NaN\n34:          Xexto    122.0000         NaN\n35:       Iktotchi    188.0000         NaN\n36:       Quermian    264.0000         NaN\n37:       Chagrian    196.0000         NaN\n38:           Muun    191.0000         NaN\n           species mean_height mean_weight"
  },
  {
    "objectID": "dplyr_datatable.html#example-with-multiple-arguments-in-group",
    "href": "dplyr_datatable.html#example-with-multiple-arguments-in-group",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "Example with multiple arguments in group",
    "text": "Example with multiple arguments in group\nWe want to find out what the max and min value of height for each subgroup of species and gender is. We also want to know, how many data points were used to calculate the result:\n\nsw_dt[,.(minimum = min(height, na.rm = T), \n         maximum = (max(height, na.rm = T)),\n         .N),   # no name used for .N!\n      by = .(species, gender)]\n\n           species    gender minimum maximum     N\n            &lt;char&gt;    &lt;char&gt;   &lt;int&gt;   &lt;int&gt; &lt;int&gt;\n 1:          Human masculine     170     202    26\n 2:          Droid masculine      96     200     5\n 3:          Human  feminine     150     185     9\n 4:        Wookiee masculine     228     234     2\n 5:         Rodian masculine     173     173     1\n 6:           Hutt masculine     175     175     1\n 7:           &lt;NA&gt;      &lt;NA&gt;     157     185     4\n 8: Yoda's species masculine      66      66     1\n 9:     Trandoshan masculine     190     190     1\n10:   Mon Calamari masculine     180     180     1\n11:           Ewok masculine      88      88     1\n12:      Sullustan masculine     160     160     1\n13:      Neimodian masculine     191     191     1\n14:         Gungan masculine     196     224     3\n15:      Toydarian masculine     137     137     1\n16:            Dug masculine     112     112     1\n17:         Zabrak masculine     171     175     2\n18:        Twi'lek masculine     180     180     1\n19:        Twi'lek  feminine     178     178     1\n20:         Aleena masculine      79      79     1\n21:     Vulptereen masculine      94      94     1\n22:          Xexto masculine     122     122     1\n23:          Toong masculine     163     163     1\n24:         Cerean masculine     198     198     1\n25:       Nautolan masculine     196     196     1\n26:     Tholothian  feminine     184     184     1\n27:       Iktotchi masculine     188     188     1\n28:       Quermian masculine     264     264     1\n29:        Kel Dor masculine     188     188     1\n30:       Chagrian masculine     196     196     1\n31:      Geonosian masculine     183     183     1\n32:       Mirialan  feminine     166     170     2\n33:       Clawdite  feminine     168     168     1\n34:       Besalisk masculine     198     198     1\n35:       Kaminoan masculine     229     229     1\n36:       Kaminoan  feminine     213     213     1\n37:          Droid  feminine      96      96     1\n38:        Skakoan masculine     193     193     1\n39:           Muun masculine     191     191     1\n40:        Togruta  feminine     178     178     1\n41:        Kaleesh masculine     216     216     1\n42:         Pau'an masculine     206     206     1\n           species    gender minimum maximum     N"
  },
  {
    "objectID": "dplyr_datatable.html#new-variables",
    "href": "dplyr_datatable.html#new-variables",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "New variables",
    "text": "New variables\n\nWhen we define new variables in base data sets, this invokes a deep copy (very inefficient)\ndata.table relies on reference using a custom operator :=\n\nWe create a new variable bmi\n\nsw_dt[, bmi := mass / (height/100)^2]\n\nThis is a lot more efficient as we fo not make a copy of the full data set.\n \nDelete variables\n\nWe can delete variables from the data table by assigning a NULL to it:\n\n\nsw_dt[, vehicles := NULL]"
  },
  {
    "objectID": "dplyr_datatable.html#new-variables-contd",
    "href": "dplyr_datatable.html#new-variables-contd",
    "title": "Modern data manipulation:  dplyr and data.table",
    "section": "New variables cont’d",
    "text": "New variables cont’d\n:= can also be used…\n\nto assign multiple variables\nin combination with selection of rows\nin combination with by and .N\n\nHere we make an example where we calculate the mean bmi (by hand) and its contribution (in %) to the common weight of all individuals from one species.\n\nWe don’t create a new data table, but add the information to the original one:\n\n\nsw_dt[, c(\"mean_bmi\", \"mass_contrib\") := .(sum(mass/(height/100)^2, na.rm=T)/.N, \n                                             mass/sum(mass, na.rm = T)*100), \n      by = species]\n\n# look at the data set\nsw_dt[, .(name, species, bmi, mean_bmi, mass_contrib)]\n\n                     name        species       bmi   mean_bmi mass_contrib\n                   &lt;char&gt;         &lt;char&gt;     &lt;num&gt;      &lt;num&gt;        &lt;num&gt;\n 1:        Luke Skywalker          Human  26.02758  14.243690     4.734965\n 2:                 C-3PO          Droid  26.89232  21.770756    26.881720\n 3:                 R2-D2          Droid  34.72222  21.770756    11.469534\n 4:           Darth Vader          Human  33.33007  14.243690     8.363055\n 5:           Leia Organa          Human  21.77778  14.243690     3.013160\n 6:             Owen Lars          Human  37.87401  14.243690     7.379166\n 7:    Beru Whitesun Lars          Human  27.54821  14.243690     4.611979\n 8:                 R5-D4          Droid  34.00999  21.770756    11.469534\n 9:     Biggs Darklighter          Human  25.08286  14.243690     5.165416\n10:        Obi-Wan Kenobi          Human  23.24598  14.243690     4.734965\n11:      Anakin Skywalker          Human  23.76641  14.243690     5.165416\n12:        Wilhuff Tarkin          Human        NA  14.243690           NA\n13:             Chewbacca        Wookiee  21.54509  23.191276    45.161290\n14:              Han Solo          Human  24.69136  14.243690     4.919444\n15:                Greedo         Rodian  24.72518  24.725183   100.000000\n16: Jabba Desilijic Tiure           Hutt 443.42857 443.428571   100.000000\n17:        Wedge Antilles          Human  26.64360  14.243690     4.734965\n18:      Jek Tono Porkins           &lt;NA&gt;  33.95062  18.483967    45.267490\n19:                  Yoda Yoda's species  39.02663  39.026630   100.000000\n20:             Palpatine          Human  25.95156  14.243690     4.611979\n21:             Boba Fett          Human  23.35095  14.243690     4.808757\n22:                 IG-88          Droid  35.00000  21.770756    50.179211\n23:                 Bossk     Trandoshan  31.30194  31.301939   100.000000\n24:      Lando Calrissian          Human  25.21625  14.243690     4.857951\n25:                 Lobot          Human  25.79592  14.243690     4.857951\n26:                Ackbar   Mon Calamari  25.61728  25.617284   100.000000\n27:            Mon Mothma          Human        NA  14.243690           NA\n28:          Arvel Crynyd          Human        NA  14.243690           NA\n29: Wicket Systri Warrick           Ewok  25.82645  25.826446   100.000000\n30:             Nien Nunb      Sullustan  26.56250  26.562500   100.000000\n31:          Qui-Gon Jinn          Human  23.89326  14.243690     5.472882\n32:           Nute Gunray      Neimodian  24.67038  24.670376   100.000000\n33:         Finis Valorum          Human        NA  14.243690           NA\n34:         Padmé Amidala          Human  13.14828  14.243690     2.767187\n35:         Jar Jar Binks         Gungan  17.18034  11.174272    44.594595\n36:          Roos Tarpals         Gungan  16.34247  11.174272    55.405405\n37:            Rugor Nass         Gungan        NA  11.174272           NA\n38:              Ric Olié          Human        NA  14.243690           NA\n39:                 Watto      Toydarian        NA   0.000000           NA\n40:               Sebulba            Dug  31.88776  31.887755   100.000000\n41:         Quarsh Panaka          Human        NA  14.243690           NA\n42:        Shmi Skywalker          Human        NA  14.243690           NA\n43:            Darth Maul         Zabrak  26.12245  13.061224   100.000000\n44:           Bib Fortuna        Twi'lek        NA   8.679460           NA\n45:           Ayla Secura        Twi'lek  17.35892   8.679460   100.000000\n46:          Ratts Tyerel         Aleena  24.03461  24.034610   100.000000\n47:              Dud Bolt     Vulptereen  50.92802  50.928022   100.000000\n48:               Gasgano          Xexto        NA   0.000000           NA\n49:        Ben Quadinaros          Toong  24.46460  24.464602   100.000000\n50:            Mace Windu          Human  23.76641  14.243690     5.165416\n51:          Ki-Adi-Mundi         Cerean  20.91623  20.916233   100.000000\n52:             Kit Fisto       Nautolan  22.64681  22.646814   100.000000\n53:             Eeth Koth         Zabrak        NA  13.061224           NA\n54:            Adi Gallia     Tholothian  14.76843  14.768431   100.000000\n55:           Saesee Tiin       Iktotchi        NA   0.000000           NA\n56:           Yarael Poof       Quermian        NA   0.000000           NA\n57:              Plo Koon        Kel Dor  22.63468  22.634676   100.000000\n58:            Mas Amedda       Chagrian        NA   0.000000           NA\n59:          Gregar Typho           &lt;NA&gt;  24.83565  18.483967    34.979424\n60:                 Cordé           &lt;NA&gt;        NA  18.483967           NA\n61:           Cliegg Lars          Human        NA  14.243690           NA\n62:     Poggle the Lesser      Geonosian  23.88844  23.888441   100.000000\n63:       Luminara Unduli       Mirialan  19.44637  18.795618    52.919021\n64:         Barriss Offee       Mirialan  18.14487  18.795618    47.080979\n65:                 Dormé          Human        NA  14.243690           NA\n66:                 Dooku          Human  21.47709  14.243690     4.919444\n67:   Bail Prestor Organa          Human        NA  14.243690           NA\n68:            Jango Fett          Human  23.58984  14.243690     4.857951\n69:            Zam Wesell       Clawdite  19.48696  19.486961   100.000000\n70:       Dexter Jettster       Besalisk  26.01775  26.017753   100.000000\n71:               Lama Su       Kaminoan  16.78076   8.390382   100.000000\n72:               Taun We       Kaminoan        NA   8.390382           NA\n73:            Jocasta Nu          Human        NA  14.243690           NA\n74:                R4-P17          Droid        NA  21.770756           NA\n75:            Wat Tambor        Skakoan  12.88625  12.886252   100.000000\n76:              San Hill           Muun        NA   0.000000           NA\n77:              Shaak Ti        Togruta  17.99015  17.990153   100.000000\n78:              Grievous        Kaleesh  34.07922  34.079218   100.000000\n79:               Tarfful        Wookiee  24.83746  23.191276    54.838710\n80:       Raymus Antilles          Human  22.35174  14.243690     4.857951\n81:             Sly Moore           &lt;NA&gt;  15.14960  18.483967    19.753086\n82:            Tion Medon         Pau'an  18.85192  18.851918   100.000000\n83:                  Finn          Human        NA  14.243690           NA\n84:                   Rey          Human        NA  14.243690           NA\n85:           Poe Dameron          Human        NA  14.243690           NA\n86:                   BB8          Droid        NA  21.770756           NA\n87:        Captain Phasma          Human        NA  14.243690           NA\n                     name        species       bmi   mean_bmi mass_contrib\n\n\nNote that the mean bmi here is so small because be calculated it by hand using /.N! So we ignore NAs here…It is rather an example to show a potential use for .N.\n\n\n\ndplyr and data.table"
  },
  {
    "objectID": "ggplot.html#what-is-ggplot2",
    "href": "ggplot.html#what-is-ggplot2",
    "title": "ggplot and visualizations",
    "section": "What is ggplot2?",
    "text": "What is ggplot2?\n\nggplot2 is a powerful data visualization package in R.\nIt implements the Grammar of Graphics, allowing users to build complex plots from simple components.\nPart of the tidyverse.\nInstall ggplot2\n\n\ninstall.packages(\"ggplot2\")\n\n\nload library in your script\n\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "ggplot.html#general-sytax",
    "href": "ggplot.html#general-sytax",
    "title": "ggplot and visualizations",
    "section": "General sytax",
    "text": "General sytax\n\nggplot(data = ..., mapping = aes(...)) + \n  geom_... +\n  ... +\n  ...\n\n\ndata: the function expects a data frame\nmapping(...) Aesthetic mappings: Defines the variables that are mapped to certain visual properties with a function aes(...)\ngeom_...: Geometric objects defining the type of plot"
  },
  {
    "objectID": "ggplot.html#a-first-example-scatterplot",
    "href": "ggplot.html#a-first-example-scatterplot",
    "title": "ggplot and visualizations",
    "section": "A first example: Scatterplot",
    "text": "A first example: Scatterplot\n\nWe use iris data set as an working example\n\n\nlibrary(ggplot2)\ndata(\"iris\", package = \"datasets\")\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nA scatterplot can be specified using geom_point()\n\n\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width))+\n  geom_point()\n\n\nNote that the variable names are not in quote marks. Call them as they are actual objects."
  },
  {
    "objectID": "ggplot.html#a-first-example-scatterplot-1",
    "href": "ggplot.html#a-first-example-scatterplot-1",
    "title": "ggplot and visualizations",
    "section": "A first example: Scatterplot",
    "text": "A first example: Scatterplot\n\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width))+\n  geom_point()\n\n\n\nNote that the variable names are not in quote marks. Call them as they are actual objects."
  },
  {
    "objectID": "ggplot.html#adding-another-aesthetic-mapping",
    "href": "ggplot.html#adding-another-aesthetic-mapping",
    "title": "ggplot and visualizations",
    "section": "Adding another aesthetic mapping",
    "text": "Adding another aesthetic mapping\n\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species))+\n  geom_point()"
  },
  {
    "objectID": "ggplot.html#adding-color-for-continuous-data-and-shape",
    "href": "ggplot.html#adding-color-for-continuous-data-and-shape",
    "title": "ggplot and visualizations",
    "section": "Adding color for continuous data and shape",
    "text": "Adding color for continuous data and shape\n\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, \n                        color = Petal.Length, shape = Species))+\n  geom_point(size = 4)\n\n\n\nWe added a size argument to the geom_point-function to make the points larger"
  },
  {
    "objectID": "ggplot.html#lines",
    "href": "ggplot.html#lines",
    "title": "ggplot and visualizations",
    "section": "Lines",
    "text": "Lines\nWe define a simple function \\[\nf(x) = sin(x) + cos(x)\\cdot2\n\\]\n\nfoo &lt;- function(x) sin(x) + cos(x*0.5)\nx &lt;- seq(0, 20, len = 100)\ny &lt;- foo(x)\n\n\nWe now deliberately ignore the data argument in ggplot and just define x and y.\n\n\nggplot(aes = aes(x = x, y = y))+\n  geom_line()"
  },
  {
    "objectID": "ggplot.html#lines-1",
    "href": "ggplot.html#lines-1",
    "title": "ggplot and visualizations",
    "section": "Lines",
    "text": "Lines\n\nggplot(mapping = aes(x = x, y = y))+\n  geom_line()"
  },
  {
    "objectID": "ggplot.html#ggplot-objects",
    "href": "ggplot.html#ggplot-objects",
    "title": "ggplot and visualizations",
    "section": "ggplot objects",
    "text": "ggplot objects\n\nWe can assign the ggplot as an object…\n\n\ng &lt;- ggplot(mapping = aes(x = x, y = y))\n\n\nand look at it:\n\n\ng"
  },
  {
    "objectID": "ggplot.html#ggplot-objects-1",
    "href": "ggplot.html#ggplot-objects-1",
    "title": "ggplot and visualizations",
    "section": "ggplot objects",
    "text": "ggplot objects\n\nadding layers later to an object:\n\n\ng +\n  geom_point()"
  },
  {
    "objectID": "ggplot.html#add-multiple-layers",
    "href": "ggplot.html#add-multiple-layers",
    "title": "ggplot and visualizations",
    "section": "add multiple layers",
    "text": "add multiple layers\n\ng +\n  geom_point()+\n  geom_line()"
  },
  {
    "objectID": "ggplot.html#subplots",
    "href": "ggplot.html#subplots",
    "title": "ggplot and visualizations",
    "section": "Subplots",
    "text": "Subplots\nMultiple plots can be designed using external packages. Here, we use cowplot.\n\nlibrary(cowplot)\n\n# assign two objects\ng_point &lt;- g +\n  geom_point()\n\ng_point_line &lt;- g +\n  geom_point()+\n  geom_line()\n\ng_point_line_color &lt;- g + \n  geom_line(aes(color = y), linewidth=2)+\n  geom_point(color = \"darkorange\")\n\nplot_grid(g, g_point, g_point_line, g_point_line_color,\n          nrow = 2, ncol = 2,\n          labels=\"AUTO\")\n\nNote that we have different color arguments:\n\nIn line 12 inside aes(...) with a variable name\nIn line 13 outside of aes(...)\nControl line width accordingly using linewidth (here: outside aes(...) )"
  },
  {
    "objectID": "ggplot.html#subplots-1",
    "href": "ggplot.html#subplots-1",
    "title": "ggplot and visualizations",
    "section": "Subplots",
    "text": "Subplots"
  },
  {
    "objectID": "ggplot.html#barplot",
    "href": "ggplot.html#barplot",
    "title": "ggplot and visualizations",
    "section": "Barplot",
    "text": "Barplot\nThe sytax stays the same for a type of plots. - A barplot only requires aesthetics for x. - We use the mtcars data set as an example\n\ndata &lt;- mtcars\ndata$cyl &lt;- as.factor(data$cyl)\nggplot(data, aes(cyl))+\n  geom_bar()"
  },
  {
    "objectID": "ggplot.html#add-color",
    "href": "ggplot.html#add-color",
    "title": "ggplot and visualizations",
    "section": "Add color",
    "text": "Add color\nUse fill instead of color here.\n\ndata$vs &lt;- as.factor(data$vs)\nggplot(data, aes(cyl, fill = vs))+\n  geom_bar()"
  },
  {
    "objectID": "ggplot.html#add-color-1",
    "href": "ggplot.html#add-color-1",
    "title": "ggplot and visualizations",
    "section": "Add color",
    "text": "Add color\nSide by side:\n\ndata$vs &lt;- as.factor(data$vs)\nggplot(data, aes(cyl, fill = vs))+\n  geom_bar(position = \"dodge\")"
  },
  {
    "objectID": "ggplot.html#histogram",
    "href": "ggplot.html#histogram",
    "title": "ggplot and visualizations",
    "section": "Histogram",
    "text": "Histogram\nHere, we use iris again. - position = \"identity\" to overplot histograms\n\nggplot(iris, aes(Sepal.Length, fill = Species))+\n  geom_histogram(bins = 30, alpha = 0.4, position = \"identity\") # alpha for transparency"
  },
  {
    "objectID": "ggplot.html#boxplot",
    "href": "ggplot.html#boxplot",
    "title": "ggplot and visualizations",
    "section": "Boxplot",
    "text": "Boxplot\n\nNote that we have Species on the x-axis and as fill color\n\n\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+\n  geom_boxplot()"
  },
  {
    "objectID": "ggplot.html#violin",
    "href": "ggplot.html#violin",
    "title": "ggplot and visualizations",
    "section": "Violin",
    "text": "Violin\n\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+\n  geom_violin()"
  },
  {
    "objectID": "ggplot.html#combination",
    "href": "ggplot.html#combination",
    "title": "ggplot and visualizations",
    "section": "Combination",
    "text": "Combination\n\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+\n  geom_violin(alpha = 0.8)+\n  geom_boxplot(width=0.1, fill=\"grey90\")"
  },
  {
    "objectID": "ggplot.html#dim-density",
    "href": "ggplot.html#dim-density",
    "title": "ggplot and visualizations",
    "section": "2-dim density",
    "text": "2-dim density\n\nggplot(iris, aes(x = Sepal.Width, y = Sepal.Length))+\n  geom_density2d_filled()\n\n\n\n\n\n\n\n\n\n\nControl flows and programming"
  }
]