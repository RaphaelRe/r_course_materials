[
  {
    "objectID": "intro_R.html#parts",
    "href": "intro_R.html#parts",
    "title": "Intro intro R",
    "section": "Parts",
    "text": "Parts\nCombination of\n\nSlides\n\n“lecture like”\nNew content, Theoretical part\n\nExercises\n\nHands-on\nDedicated time during the course\n“Interactive”"
  },
  {
    "objectID": "intro_R.html#why-r",
    "href": "intro_R.html#why-r",
    "title": "Intro intro R",
    "section": "Why R?",
    "text": "Why R?\nWhy R?\n\nR is open source\nAll techniques for data analyses\nState-of-the-art graphics capabilities\nA platform for programming new statistical methods or analysis pipelines (in form of R-packages)"
  },
  {
    "objectID": "intro_R.html#programming-in-general",
    "href": "intro_R.html#programming-in-general",
    "title": "Intro intro R",
    "section": "Programming (in general)",
    "text": "Programming (in general)\n“Good programmers are made, not born.” (Gerald M. Weinberg - The Psychology of Computer Programming)\n\nconsequence I\ntrain…\nconsequence II\ntrain…\nconsequence III\ntrain more\n\nHands-on is important. Understanding is less that 30%"
  },
  {
    "objectID": "intro_R.html#r-and-r-studio",
    "href": "intro_R.html#r-and-r-studio",
    "title": "Intro intro R",
    "section": "R and R Studio",
    "text": "R and R Studio\nRequired tools for the course:\n\nProgramming language R\n\ndesigned to make fast prototyping for statistical analysis\ninterpreted language\n\nRStudio (optional, but recommended)\n\nIDE tailored for R\nIntegrates a lot more (e.g. python, c++, etc.)"
  },
  {
    "objectID": "intro_R.html#r-packages",
    "href": "intro_R.html#r-packages",
    "title": "Intro intro R",
    "section": "R packages",
    "text": "R packages\n\nR comes with many useful packages by default\nHowever, the strength lies in the huge collection of external packages\nMost popular and default: CRAN\nInstall new packages in R using either\n\nusing a command:\n\ninstall.packages(\"&lt;package-name&gt;\") (e.g.install.packages(\"mvtnorm\"))\n\nRStudio\n\nusing built-in tools from the IDE"
  },
  {
    "objectID": "intro_R.html#addition-subtraction-etc",
    "href": "intro_R.html#addition-subtraction-etc",
    "title": "Intro intro R",
    "section": "Addition, subtraction, etc",
    "text": "Addition, subtraction, etc\n\n1+2\n\n[1] 3\n\n1-2\n\n[1] -1\n\n1*2\n\n[1] 2\n\n1/2\n\n[1] 0.5\n\n1^2\n\n[1] 1\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\n1/0"
  },
  {
    "objectID": "intro_R.html#special-symbols-functions",
    "href": "intro_R.html#special-symbols-functions",
    "title": "Intro intro R",
    "section": "Special symbols functions",
    "text": "Special symbols functions\nSpecial symbols\n\npi\nInf\n\nMathematical functions\n\nexp(1)\n\n[1] 2.718282\n\nlog(1)\n\n[1] 0\n\n\nSpecial cases:\n\nNaN is a data type that indicates an invalid number.\n\n\nlog(-1)\n\n[1] NaN\n\nNaN + 1\n\n[1] NaN\n\n\n\nNA is a missing value.\n\n\nNA + 1\n\n[1] NA\n\n\n\nNULL means literally empty/nothing"
  },
  {
    "objectID": "intro_R.html#assigning-objects",
    "href": "intro_R.html#assigning-objects",
    "title": "Intro intro R",
    "section": "Assigning objects",
    "text": "Assigning objects\nAssignment is done using &lt;-\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nAlternatively, use =\n\nx = sqrt(2)\ny = sqrt(2)\nx * y\n\n[1] 2\n\n\nLook at environment pane in R Studio, what can you see?"
  },
  {
    "objectID": "intro_R.html#naming-objects",
    "href": "intro_R.html#naming-objects",
    "title": "Intro intro R",
    "section": "Naming objects",
    "text": "Naming objects\n\nObjects in R have to start with a letter\n\nCase sensitive\n\na &lt;- 2\nA &lt;- 1\na-a\n\n[1] 0\n\n\nOverwrite variables with old ones\n\na &lt;- a + 1\n\nCombination of words\n\nvariable_name &lt;- 1\nvariable.name &lt;- 1\nvariableName &lt;- 1"
  },
  {
    "objectID": "intro_R.html#comments",
    "href": "intro_R.html#comments",
    "title": "Intro intro R",
    "section": "Comments",
    "text": "Comments\nSometimes it is useful, to comment code. Use a # to comment\nStandard:\n\n1+1\n\n[1] 2\n\n\nComment a line (no output):\n\n# 1+1\n\nComment after an expression (only 1+1 gets evaluated):\n\n1+1 # +1\n\n[1] 2"
  },
  {
    "objectID": "intro_R.html#function-calling",
    "href": "intro_R.html#function-calling",
    "title": "Intro intro R",
    "section": "Function calling",
    "text": "Function calling\nSo far we used expressions like f(...). This is a function. E.g.\n\nexp(2)\n\nWe call the function exp with a value of 2. Or the (natural) logarithm:\n\nlog(exp(1))\n\n[1] 1\n\n\nWe can specify the base as a second argument:\n\nlog(2, 2)\n\n[1] 1\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nLog(Exp(1))"
  },
  {
    "objectID": "intro_R.html#get-documentation",
    "href": "intro_R.html#get-documentation",
    "title": "Intro intro R",
    "section": "Get documentation",
    "text": "Get documentation\nAccess the documentation using\n\n&lt;F1&gt;\ntype ?function_name\nuse RStudio functionality\n\nE.g. documentation for log() reveals that we calculate the natural logarithm.\n\n?log\nlog(x, base = exp(1))"
  },
  {
    "objectID": "intro_R.html#function-calling-contd",
    "href": "intro_R.html#function-calling-contd",
    "title": "Intro intro R",
    "section": "Function calling cont’d",
    "text": "Function calling cont’d\nYou can ignore the argument name, when placements are clear. - We have done that for exp and log\nHence, this here\n\nlog(2, 2)\n\nmeans, that we actually call\n\nlog(x=2, base=2)\n\nIf you specify the argument, order does not matter.\nExample:\n\nlog(base=3, x=2)\nlog(3, 2)\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nlog &lt;- 1\nlog(log)"
  },
  {
    "objectID": "intro_R.html#basic-primitive-data-types",
    "href": "intro_R.html#basic-primitive-data-types",
    "title": "Intro intro R",
    "section": "Basic (primitive) data types",
    "text": "Basic (primitive) data types\nnumeric\nA (floating point) number. We used this so far (default).\n1.0, 1.34, -33, pi\n\nlogical\nA binary data type.\nTRUE, FALSE, T, F\n\ninteger\nCan be specified using an “L”.\n1L, 100L, -99L\n\ncharacter\nRepresents letters OR sentences.\n'a', \"abc\", \"May the force be with you\""
  },
  {
    "objectID": "intro_R.html#vectors-1",
    "href": "intro_R.html#vectors-1",
    "title": "Intro intro R",
    "section": "Vectors",
    "text": "Vectors\nYou can combine single values to a vector.\n\na &lt;- c(1,2,3,4)\na\n\n[1] 1 2 3 4\n\nb &lt;- c(TRUE, FALSE, TRUE)\nb\n\n[1]  TRUE FALSE  TRUE\n\nc &lt;- c(\"a\", 'ab', \"ab c\")\nc\n\n[1] \"a\"    \"ab\"   \"ab c\"\n\n\nMany operations in R are vectorized\n\na + a\n\n[1] 2 4 6 8\n\na * a\n\n[1]  1  4  9 16\n\nexp(a)\n\n[1]  2.718282  7.389056 20.085537 54.598150\n\n-a\n\n[1] -1 -2 -3 -4\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nc(\"1\",2,3)"
  },
  {
    "objectID": "intro_R.html#automatic-recycling",
    "href": "intro_R.html#automatic-recycling",
    "title": "Intro intro R",
    "section": "Automatic recycling",
    "text": "Automatic recycling\n\na &lt;- c(1,2,3,4)\na + 1\n\n[1] 2 3 4 5\n\nb &lt;- c(2,2)\na + b\n\n[1] 3 4 5 6\n\n\n\n\n\n\n\n\nWarning\n\n\nNote the behavior for for vectors with different length! Example:\n\na &lt;- c(1,2,3)\nb &lt;- c(1,2)\na + b\n\nWarning in a + b: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 4"
  },
  {
    "objectID": "intro_R.html#vector-creation",
    "href": "intro_R.html#vector-creation",
    "title": "Intro intro R",
    "section": "Vector creation",
    "text": "Vector creation\nThere are a lot of convenience functions to create vectors.\n\nc(1,2,3,4)\n\n[1] 1 2 3 4\n\n1:4\n\n[1] 1 2 3 4\n\nseq(4)\n\n[1] 1 2 3 4\n\n\nMore complex ones:\n\n4:-3\n\n[1]  4  3  2  1  0 -1 -2 -3\n\nseq(-10, 10, by = 2)\n\n [1] -10  -8  -6  -4  -2   0   2   4   6   8  10\n\nseq(-10, 10, length.out = 10) # vector of length 10\n\n [1] -10.000000  -7.777778  -5.555556  -3.333333  -1.111111   1.111111\n [7]   3.333333   5.555556   7.777778  10.000000"
  },
  {
    "objectID": "intro_R.html#select-elements-of-a-vector",
    "href": "intro_R.html#select-elements-of-a-vector",
    "title": "Intro intro R",
    "section": "Select elements of a vector",
    "text": "Select elements of a vector\nAccess elements of a vector using positional numbers within [...]:\n\nx &lt;- c(2,4,2,5)\nx[1]\n\n[1] 2\n\n\nMultiple elements\n\nselection &lt;- c(1,4)\nx[selection]\n\n[1] 2 5\n\nx[c(1,4)]\n\n[1] 2 5\n\n\nNegative values will be excluded\n\nx[-c(1,3)]\n\n[1] 4 5\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nx[1:5]\nx[-(5:10)]\nx[0]"
  },
  {
    "objectID": "intro_R.html#logical-values-for-comparison",
    "href": "intro_R.html#logical-values-for-comparison",
    "title": "Intro intro R",
    "section": "Logical values for comparison",
    "text": "Logical values for comparison\nRecall the very most basic data type logical, i.e. TRUE and FALSE.\n\nWe can create such an object by comparison:\n\n\n1 == 2  # lhs equal rhs?\n\n[1] FALSE\n\n1 != 2  # lhs unequal rhs?\n\n[1] TRUE\n\n1 &gt; 2  # lhs larger rhs?\n\n[1] FALSE\n\n1 &gt;= 2  # lhs larger or equal rhs?\n\n[1] FALSE\n\n1 &lt; 2  # lhs less than rhs?\n\n[1] TRUE\n\n1 &lt;= 2  # lhs less or equal than rhs?\n\n[1] TRUE\n\n\nSwap value:\n\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\n1 == \"1\"\n1 != NaN \nNA == NA  # we will learn the solution in a few slides"
  },
  {
    "objectID": "intro_R.html#filter-elements-of-a-vector",
    "href": "intro_R.html#filter-elements-of-a-vector",
    "title": "Intro intro R",
    "section": "Filter elements of a vector",
    "text": "Filter elements of a vector\nComparison operators are vectorized:\n\nc(T,F,T) == c(F,F,T)  # element-wise comparison\n\n[1] FALSE  TRUE  TRUE\n\n\nCheck condition on a numeric vector\n\nx &lt;- c(2,4,2,5)\nposition_two &lt;- x == 2  # logical vector showing, where the condition holds\nposition_two\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\nUse logical values to filter a vector.\n\nx[position_two]\n\n[1] 2 2\n\n# or dictly\nx[x == 2]\n\n[1] 2 2\n\n\nFilter for values less than 3\n\nx[x &lt; 3]\n\n[1] 2 2"
  },
  {
    "objectID": "intro_R.html#combine-filters-with-and",
    "href": "intro_R.html#combine-filters-with-and",
    "title": "Intro intro R",
    "section": "Combine filters with & and |",
    "text": "Combine filters with & and |\nCombination operations…\n\nTRUE & TRUE\n\n[1] TRUE\n\nFALSE & TRUE\n\n[1] FALSE\n\nTRUE | TRUE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\n\n…or vectorized\n\nx &lt;- c(T,F,T,F)\ny &lt;- c(T,T,F,F)\nx & y\n\n[1]  TRUE FALSE FALSE FALSE\n\nx | y\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\nUse this to filter a vector for multiple conditions\n\nx[(x &lt; 5) & (x &gt; 2)]\n\nlogical(0)"
  },
  {
    "objectID": "intro_R.html#assign-new-values-in-a-vector",
    "href": "intro_R.html#assign-new-values-in-a-vector",
    "title": "Intro intro R",
    "section": "Assign new values in a vector",
    "text": "Assign new values in a vector\nWe can assign new values to a vector using a combination of selection and assignment\n\nx &lt;- 1:5\nx[1] &lt;- 2\nx\n\n[1] 2 2 3 4 5\n\nx[x &gt; 3] &lt;- -99\nx\n\n[1]   2   2   3 -99 -99\n\nx[-1] &lt;- 100\nx\n\n[1]   2 100 100 100 100\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nx[100] &lt;- 1"
  },
  {
    "objectID": "intro_R.html#vector-operations",
    "href": "intro_R.html#vector-operations",
    "title": "Intro intro R",
    "section": "Vector operations",
    "text": "Vector operations\n\nx &lt;- c(1,1,2,3)\nlength(x)\n\n[1] 4\n\nappend(x, c(1,2,3))\n\n[1] 1 1 2 3 1 2 3\n\nrev(x)\n\n[1] 3 2 1 1\n\nsort(x)\n\n[1] 1 1 2 3\n\nunique(x)\n\n[1] 1 2 3\n\nsum(x) \n\n[1] 7"
  },
  {
    "objectID": "intro_R.html#factors",
    "href": "intro_R.html#factors",
    "title": "Intro intro R",
    "section": "Factors",
    "text": "Factors\nConsider a vector, that represents a categorical variable. Let’s say colors.\n\ncolors &lt;- c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\")\ncolors\n\n[1] \"blue\"  \"red\"   \"blue\"  \"red\"   \"green\" \"black\" \"green\" \"white\"\n\n\nWe cast colors into a factor now:\n\ncolors &lt;- as.factor(colors)\ncolors\n\n[1] blue  red   blue  red   green black green white\nLevels: black blue green red white\n\nlevels(colors)\n\n[1] \"black\" \"blue\"  \"green\" \"red\"   \"white\"\n\nas.numeric(colors)\n\n[1] 2 4 2 4 3 1 3 5\n\nclass(colors)\n\n[1] \"factor\"\n\ntypeof(colors)\n\n[1] \"integer\"\n\n\nHence, a vector of integeres where each value corresponds to a character value."
  },
  {
    "objectID": "intro_R.html#complex-data-structures",
    "href": "intro_R.html#complex-data-structures",
    "title": "Intro intro R",
    "section": "Complex data structures",
    "text": "Complex data structures\n\nfrom Ceballos and Cardiel, (2013). Data structure – First Steps in R. Retreived 25-11-2018 from http:// venus.ifca.unican.es/ Rintro.2024\nUse str(...) to inspect the structure of complex data types!"
  },
  {
    "objectID": "intro_R.html#vector-matrix-array",
    "href": "intro_R.html#vector-matrix-array",
    "title": "Intro intro R",
    "section": "Vector, Matrix, Array",
    "text": "Vector, Matrix, Array\nWe already got vectors. Lets combine them:\n\nx &lt;- 1:4\n(x_rbind &lt;- cbind(x,x)) # 4 rows, 2 columns\n\n     x x\n[1,] 1 1\n[2,] 2 2\n[3,] 3 3\n[4,] 4 4\n\n(x_cbind &lt;- rbind(x,x)) # 2 rows, 4 columns\n\n  [,1] [,2] [,3] [,4]\nx    1    2    3    4\nx    1    2    3    4\n\ndim(x_rbind)\n\n[1] 4 2\n\ndim(x_cbind)\n\n[1] 2 4\n\nnrow(x_rbind)\n\n[1] 4\n\nncol(x_rbind)\n\n[1] 2"
  },
  {
    "objectID": "intro_R.html#vector-matrix-array-contd",
    "href": "intro_R.html#vector-matrix-array-contd",
    "title": "Intro intro R",
    "section": "Vector, Matrix, Array cont’d",
    "text": "Vector, Matrix, Array cont’d\nWe can define a matrix using the matrix function:\n\nmatrix(1:6, nrow = 3, ncol = 2)\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\nmatrix(1:6, nrow = 3, ncol = 2, byrow = T)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\n\nArrays as a generalization with multiple dimensions\n\narray(1:12, dim = c(3,2,2))\n\n, , 1\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n, , 2\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\n\nThis is also sometimes called a tensor."
  },
  {
    "objectID": "intro_R.html#selectfilter-elements-on-arrays",
    "href": "intro_R.html#selectfilter-elements-on-arrays",
    "title": "Intro intro R",
    "section": "Select/filter elements on Arrays",
    "text": "Select/filter elements on Arrays\nAs vectors, we can select and filter. Seperate dimensions with a ,, i.e. [... , ...]\n\n(m &lt;- matrix(1:6, nrow = 3, ncol = 2))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\nm[2,2]\n\n[1] 5\n\nm[nrow(m), ncol(m) ]\n\n[1] 6\n\n\nDefining no entry will return the full dimension:\n\nm[2,]\n\n[1] 2 5\n\nm[,1]\n\n[1] 1 2 3\n\n\n\n\n\n\n\n\nNote\n\n\nWhat will happen?\n\nm[1,,2]\nm[10]"
  },
  {
    "objectID": "intro_R.html#list",
    "href": "intro_R.html#list",
    "title": "Intro intro R",
    "section": "List",
    "text": "List\nA list is a collection of elements. These elements could be any object.\n\n(l &lt;- list(1, \"2\", 1:3, list(m)))\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] 1 2 3\n\n[[4]]\n[[4]][[1]]\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nAccess elements of a list with [[...]].\n\nl[[2]]\n\n[1] \"2\"\n\n\nA sub-list can be accessed with [...].\n\nl[1:3]\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] 1 2 3"
  },
  {
    "objectID": "intro_R.html#list-contd",
    "href": "intro_R.html#list-contd",
    "title": "Intro intro R",
    "section": "List cont’d",
    "text": "List cont’d\nYou can define names for lists:\n\nl &lt;- list(slot1 = 1:3, slot2 = c(\"a\", \"b\"), slot3 = l)\nnames(l)\n\n[1] \"slot1\" \"slot2\" \"slot3\"\n\n\nAccess list elements using the name and a $:\n\nl$slot3 # return the original list l before overwriting it\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] 1 2 3\n\n[[4]]\n[[4]][[1]]\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nDelete elements by assigning a NULL to a slot\n\nl[2:3] &lt;- NULL\nl\n\n$slot1\n[1] 1 2 3"
  },
  {
    "objectID": "intro_R.html#data-frame",
    "href": "intro_R.html#data-frame",
    "title": "Intro intro R",
    "section": "Data Frame",
    "text": "Data Frame\nA data frame is basically a list, where each element is a vector of the same length. However, it implements function to handle it as a matrix.\nLet’s define a data set representing cars:\n\ncol &lt;- as.factor(c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\"))\npri &lt;- c(10, 20, 9, 50, 0.4, 15, 160, 60) * 1000\nis_el &lt;- c(F,F,F,T,F,T,F,T)\n\ncar_ds &lt;- data.frame(color = col, price = pri, is_electric = is_el)\ncar_ds\n\n  color  price is_electric\n1  blue  10000       FALSE\n2   red  20000       FALSE\n3  blue   9000       FALSE\n4   red  50000        TRUE\n5 green    400       FALSE\n6 black  15000        TRUE\n7 green 160000       FALSE\n8 white  60000        TRUE\n\nstr(car_ds)\n\n'data.frame':   8 obs. of  3 variables:\n $ color      : Factor w/ 5 levels \"black\",\"blue\",..: 2 4 2 4 3 1 3 5\n $ price      : num  10000 20000 9000 50000 400 15000 160000 60000\n $ is_electric: logi  FALSE FALSE FALSE TRUE FALSE TRUE ..."
  },
  {
    "objectID": "intro_R.html#data-frame-contd",
    "href": "intro_R.html#data-frame-contd",
    "title": "Intro intro R",
    "section": "Data Frame cont’d",
    "text": "Data Frame cont’d\nWe can work on a data set as we work with a matrix\n\n# All rows with red cars\ncar_ds[car_ds$color == \"red\", ]\n\n  color price is_electric\n2   red 20000       FALSE\n4   red 50000        TRUE\n\n# price of all black cars\ncar_ds[car_ds$color == \"black\", \"price\"]\n\n[1] 15000\n\n# set a new price for the last car in the ds\ncar_ds[8, 2] &lt;- 600\ncar_ds\n\n  color  price is_electric\n1  blue  10000       FALSE\n2   red  20000       FALSE\n3  blue   9000       FALSE\n4   red  50000        TRUE\n5 green    400       FALSE\n6 black  15000        TRUE\n7 green 160000       FALSE\n8 white    600        TRUE"
  },
  {
    "objectID": "intro_R.html#more-on-data-structures",
    "href": "intro_R.html#more-on-data-structures",
    "title": "Intro intro R",
    "section": "More on data structures",
    "text": "More on data structures\n\nA data frame behaves like a matrix.\nHowever, keep in mind that it is actually a list. We can easily prove that:\n\n\nis.list(car_ds)\n\n[1] TRUE\n\n\nUse str(...) to check the data structure of any object:\n\nstr(car_ds)\n\n'data.frame':   8 obs. of  3 variables:\n $ color      : Factor w/ 5 levels \"black\",\"blue\",..: 2 4 2 4 3 1 3 5\n $ price      : num  10000 20000 9000 50000 400 15000 160000 600\n $ is_electric: logi  FALSE FALSE FALSE TRUE FALSE TRUE ...\n\nm &lt;- matrix(1:4, ncol = 2)\nstr(m)\n\n int [1:2, 1:2] 1 2 3 4"
  },
  {
    "objectID": "intro_R.html#load-data",
    "href": "intro_R.html#load-data",
    "title": "Intro intro R",
    "section": "Load data",
    "text": "Load data\nWe can load a data set from a package using data(...).\n\ndata(\"iris\", package = \"datasets\")  # look in the environment variables\n\nWe can load data from files. Use read.table(...), or wrapper functions with reasonable default values. E.g. We can read a file directly from the web:\n\nd &lt;- read.csv(\"https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/mtcars.csv\")\nhead(d)  # show the first few lines of a data set\n\n           rownames  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nNote, that we can also use this to read a data set from a local directory! To do that we have to specify either the full path or define the path from the working directory. Use getwd(...) and setwd(...) to get or set the current working directory. See next slide for an example."
  },
  {
    "objectID": "intro_R.html#save-data-sets",
    "href": "intro_R.html#save-data-sets",
    "title": "Intro intro R",
    "section": "Save data sets",
    "text": "Save data sets\nConsider a data set, you have worked with. You can save it using write functions.\n\nwrite.csv(car_ds, file = \"example_data.csv\")  # we save our data set in the current working directory\n\nWe can again read the data as a new object:\n\nd_loaded &lt;- read.csv(\"example_data.csv\")\n\nall.equal(car_ds,d_loaded)  # test whether 2 (more complex) R object are the same\n\n[1] \"Names: 3 string mismatches\"                          \n[2] \"Length mismatch: comparison on first 3 components\"   \n[3] \"Component 1: 'current' is not a factor\"              \n[4] \"Component 2: Modes: numeric, character\"              \n[5] \"Component 2: target is numeric, current is character\"\n[6] \"Component 3: Modes: logical, numeric\"                \n[7] \"Component 3: target is logical, current is numeric\"  \n\n\nWe can read other files as well. E.g. excel, SPSS, SAS, etc.\nThere are a lot of packages to do that.\nI use the function load(...) from the rio package that tries to unify a lot of different formats.)"
  },
  {
    "objectID": "intro_R.html#save-and-load-r-objects",
    "href": "intro_R.html#save-and-load-r-objects",
    "title": "Intro intro R",
    "section": "Save and load R objects",
    "text": "Save and load R objects\nSo far, we only worked with data frames for read and write operations. We can save general R objects using save(...) and load(...) using the .RData format.\n\na_list &lt;- list(a = 42, data = iris, comment = \"whatever\")\n\nsave(a_list, file = \"example_object.RData\")\n\nload(\"example_object.RData\")\n\n\n\n\nIntro intro R"
  },
  {
    "objectID": "Exercises.html",
    "href": "Exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "About this site\nback"
  },
  {
    "objectID": "control_flows.html#first-slide",
    "href": "control_flows.html#first-slide",
    "title": "Control flows",
    "section": "First slide",
    "text": "First slide\nSlide about if statements"
  },
  {
    "objectID": "control_flows.html#first-slide-1",
    "href": "control_flows.html#first-slide-1",
    "title": "Control flows",
    "section": "First slide",
    "text": "First slide\nSlide"
  },
  {
    "objectID": "control_flows.html#first-slide-2",
    "href": "control_flows.html#first-slide-2",
    "title": "Control flows",
    "section": "First slide",
    "text": "First slide\nSlide"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slides for the course",
    "section": "",
    "text": "Click on the title to open them in full screen\n\n\nIntro into R\n\n\n\n\nControl flows\n\n\n\n\nggplot\n\n\ndplyr\n\n\ndata.table\n\n\nR Markdown"
  }
]