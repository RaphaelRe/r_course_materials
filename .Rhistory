mean_height = mean(height),
mean_weight = mean(mass),
)
starwars %>%
group_by(species, homeworld) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
)
starwars %>%
group_by(species, homeworld) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
)
starwars %>%
group_by(species, sex) %>%
select(height, mass) %>%
summarise(
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
starwars %>%
group_by(species, homeworld) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
)
starwars %>%
group_by(species) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
)
starwars %>%
group_by(species) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
) %>%
desc
?desc
?arrange
starwars %>%
group_by(species) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
) %>%
arrange(mean_height)
starwars %>%
group_by(species) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
) %>%
arrange(desc(mean_height))
starwars %>%
group_by(species) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
) %>%
arrange(desc(mean_weight))
starwars %>% filter(species == "Kaleesh")
library(data.table)
data.table(starwars)
setDT(starwars)
head(sw_dt)
sw_dt <- starwars
head(sw_dt)
?map
map
Map
?Map
max(iris+)
max(iris)
iris
max(iris[, 1:4])
?data.table::fread
sw_dt[,.(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE)
), by = species]
sw_dt[height > 170 & mass < 130, .(name, homeworld)]
library(data.table)
sw_dt <- starwars
setDT(sw_dt)
sw_dt[height > 170 & mass < 130, .(name, homeworld)]
sw_dt[,.(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE)
), by = species]
starwars %>%
group_by(species) %>%
summarise(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE),
) %>%
arrange(desc(mean_weight))
sw_dt[order(-mean_weight),.(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE)
), by = species]
), by = species][order(-mean_weight,]
sw_dt[,.(
mean_height = mean(height, na.rm = TRUE),
mean_weight = mean(mass, na.rm = TRUE)
), by = species][order(-mean_weight),]
starwars[species == "Human", .N]
starwars[,.N, by = "species"]  # 35 humans in the data set
starwars[,.N, by = species]  # 35 humans in the data set
starwars[species == "Wooliee"]
starwars[species == "Wookiee"]
starwars[,.N, by = species]
starwars[,.N, by = species]
starwars[,.N, by = .(species)]
starwars[,.(.N), by = .(species)]
starwars[,.N, by = species]
starwars[1:5,.N, by = species]
starwars[,.N, by = species]
head(starwars[,.N, by = species])
sw_dt
sw_dt
sw_dt %>% names
minmax
range(1:4)
dw_dt[, .(sex, gener)]
sw_dt[, .(sex, gender)]
?range
sw_dt[,.(minimum = min(height, na.rm = T), maximum = (max(height, na.rm = T), .N)
sw_dt[,.(minimum = min(height, na.rm = T), maximum = (max(height, na.rm = T)), .N), by = .(species, gender)]
# sw_dt[,.(minimum = min(height, na.rm = T), maximum = (max(height, na.rm = T)), .N), by = .(species, gender)]
sw_dt[,.(range(height, na.rm=T), .N), by = .(species, gender)]
a := 1
sw_dt[, c("mean bmi", "bmi_from_means") := .(sum(mass / (height/100)^2)/.N,
mean(mass) / (mean(height)/100)^2),
by = species]
sw_dt
?sum
sw_dt[, c("mean bmi", "bmi_from_means") := .(sum(mass / (height/100)^2, na.rm=T)/.N,
mean(mass, na.rm=T) / (mean(height, na.rm=T)/100)^2),
by = species]
sw_dt
sw_dt[, c("mean_bmi", "bmi_from_means") := .(sum(mass / (height/100)^2, na.rm=T)/.N,
mean_bmi),
by = species]
sw_dt[, c("mean_bmi", "bmi_from_means") := .(sum(mass/(height/100)^2, na.rm=T)/.N,
weight/sum(mass)*100),
by = species]
sw_dt[, c("mean_bmi", "bmi_from_means") := .(sum(mass/(height/100)^2, na.rm=T)/.N,
mass/sum(mass)*100),
by = species]
sw_dt
sw_dt[, c("mean_bmi", "mass_contrib") := .(sum(mass/(height/100)^2, na.rm=T)/.N,
mass/sum(mass)*100),
by = species]
mass/sum(mass)*100),
sw_dt
sw_dt[, c("mean_bmi", "mass_contrib") := .(sum(mass/(height/100)^2, na.rm=T)/.N,
mass/sum(mass, na.rm = T)*100),
by = species]
sw_dt
setwd("~/LEHRE/r_course_materials")
sin(21)
sin(2)
"1"
1 + "1"
T +T
f1 = 1:4
f2 = letter[1:4]
f2 = letters[1:4]
L = list(f1, f2)
L
data.frame(L)
str(data.frame(L))
str(L)
"1" + 1
f1 <- c("apple", "banana", "cherry", "date", "elderberry")
f2 <- factor(c("red", "green", "blue", "yellow", "purple"))
f3 <- c(10.5, 23.3, 42.7, 5.8, 12.1)
L <- list(f1 = f1, f2 = f2, f3 = f3)
L
str(L)
df1 <- data.frame(L)
str(df1)
write.csv(df1, file = "data_set.csv", row.names = FALSE)
df2 <- read.csv("data_set.csv", stringsAsFactors = TRUE)
all.equal(df1, df2)
df1
df2
df1$f1 == df2$f1
df1$f2 == df2$f2
df1$f3 == df2$f3
f2
df2 <- read.csv("data_set.csv")
all.equal(df1, df2)
df2$f2 <- as.factor(df2$f2)
all.equal(df1, df2)
strsplit("Hi it is a pleasure to meet you!", split = " ")
strsplit("Hi it is a pleasure to meet you!", split = " ")
strsplit("Hi it is a pleasure to meet you!", split = " ")[1]
strsplit("Hi it is a pleasure to meet you!", split = " ")[[1]]
strsplit("Hi it is a pleasure to meet you!", split = " ")[[1]][1]
greeting <- function(name){
words <- strsplit("It is a pleasure to meet you!", split = " ")[[1]]
cat(paste0("Hi ", name, "!"))
for (i in words) {
cat(words[i])
sleep(0.2)
cat(" ")
}
}
greeting("a")
sys.sleep(0.2)
greeting <- function(name){
words <- strsplit("It is a pleasure to meet you!", split = " ")[[1]]
cat(paste0("Hi ", name, "!"))
for (i in words) {
cat(words[i])
Sys.sleep(0.2)
cat(" ")
}
}
greeting("a")
greeting <- function(name){
words <- strsplit("It is a pleasure to meet you!", split = " ")[[1]]
cat(paste0("Hi ", name, "!"))
for (i in words) {
cat(i)
Sys.sleep(0.2)
cat(" ")
}
}
greeting("aaa")
greeting <- function(name){
words <- strsplit("It is a pleasure to meet you!", split = " ")[[1]]
cat(paste0("Hi ", name, "!"))
for (i in words) {
cat(i)
Sys.sleep(0.1)
cat(" ")
}
}
greeting("aa")
greeting <- function(name){
words <- strsplit("It is a pleasure to meet you!", split = " ")[[1]]
cat(paste0("Hi ", name, "!"))
for (i in words) {
cat(i)
Sys.sleep(0.05)
cat(" ")
}
}
greeting("aa")
greeting("aa")
greeting <- function(name){
words <- strsplit("It is a pleasure to meet you!", split = " ")[[1]]
cat(paste0("Hi ", name, "!"))
for (i in words) {
cat(i)
Sys.sleep(0.1)
cat(" ")
}
}
greeting("a")
?print
?cat
paste(list("a", "b"))
?atomic
is.atomic(1:3)
?is.atomic
??logical
?logical
seq_along(NULL)
seq_along(1:)
seq_along(1:5)
seq_along(5:1)
check_list_elements_length_one <- function(lst) {
# Initialize a logical vector to store the results
result <- logical(length = length(lst))
# Iterate over the list elements
for (i in 1:length(lst)) {
result[i] <- check_length_one(lst[[i]])
}
return(result)
}
check_list_elements_length_one(list(1,2,3))
check_length_one <- function(x) {
is_len1 <- length(x) == 1
return(is_len1)
}
check_length_one("a")
check_length_one(1:3)
check_list_elements_length_one <- function(lst) {
# Initialize a logical vector to store the results
result <- logical(length = length(lst))
# Iterate over the list elements
for (i in 1:length(lst)) {
result[i] <- check_length_one(lst[[i]])
}
return(result)
}
check_list_elements_length_one(list(1,2,3))
check_list_elements_length_one(list(1:2,2,3))
concatenate_if_all_length_one <- function(lst) {
# Check if all elements have length 1
if (all(check_list_elements_length_one(lst))) {
# Concatenate the elements into one long character sentence
return(paste(unlist(lst)))
} else {
print("At least one element of the list has length > 1! Returning FALSE")
return(FALSE)
}
}
# Test the function on different inputs
test_list_1 <- list("Hello", "world", "!")
test_list_2 <- list("This", "is", "a", "test", 123)
test_list_3 <- list(1, 2, 3, "Go")
# Test the function on different inputs
concatenate_if_all_length_one(list("Hello", "world"))
concatenate_if_all_length_one(list(123))
concatenate_if_all_length_one(list(1, 2, 3, "a", "b", "c"))
list(1, 2, 3, "a", "b", "c")
unlist(list(1, 2, 3, "a", "b", "c"))
unlist(list(1, 2, 3, "a", "b", "c")) %>% paste
library(magrittr)
unlist(list(1, 2, 3, "a", "b", "c")) %>% paste
unlist(list(1, 2, 3, "a", "b", "c")) %>% paste0
concatenate_if_all_length_one <- function(lst) {
# Check if all elements have length 1
if (all(check_list_elements_length_one(lst))) {
# Concatenate the elements into one long character sentence
return(paste(unlist(lst), collapse = " "))
} else {
print("At least one element of the list has length > 1! Returning FALSE")
return(FALSE)
}
}
# Test the function on different inputs
concatenate_if_all_length_one(list("Hello", "world"))
concatenate_if_all_length_one(list(123))
concatenate_if_all_length_one(list(1, 2, 3, "a", "b", "c"))
# Functions from before:
check_length_one <- function(x) {
is_len1 <- length(x) == 1
return(is_len1)
}
check_list_elements_length_one <- function(lst) {
# Initialize a logical vector to store the results
result <- logical(length = length(lst))
# Iterate over the list elements
for (i in 1:length(lst)) {
result[i] <- check_length_one(lst[[i]])
}
return(result)
}
# New rewrite the second function:
check_list_elements_length_one_apply <- function(lst){
result <- sapply(lst, check_length_one)
return(result)
}
# test
check_list_elements_length_one(list(1,2,3))
check_list_elements_length_one_apply(list(1,2,3))
check_list_elements_length_one(list(1:2,2,3))
check_list_elements_length_one_apply(list(1:2,2,3))
data(ChickWeight)
str(ChickWeight)
?ChickWeight
ChickWeight
class(ChickWeight)
str(ChickWeight)
data.frame(ChickWeight)
data.frame(ChickWeight) %>% str
head(ChickWeight)
head(ChickWeight, 10)
library(ggplot2)
ggplot(ChickWeight)+
geom_point(aes(weight, time))
ggplot(ChickWeight)+
geom_point(aes(weight, Chick))
data("BostonHousing", package = "mlbench")
install.packages("mlbench", Ncpus = 4)
data("BostonHousing", package = "mlbench")
BostonHousing
?BostonHousing
?mlbench::BostonHousing
titanic::titanic
install.packages("titanic", Ncpus = 5)
?Titanic
titanic::titanic_train
?titanic::titanic_train
ggplot(titanic::titanic_train) + geom_point(aes(Age, Fare))
faithful
ggplot(faithful) + geom_point(aes(eruptions, waiting))
?faithful
data("faithful")
ls()
ggplot(faithful) + geom_point(aes(eruptions, waiting))
ggplot(faithful) + geom_point(aes(eruptions, waiting))
Orange
Orange %>% ggplot(aes(age, circumfence))
Orange %>% ggplot(aes(age, circumference))
Orange %>% ggplot(aes(age, circumference)) + geom_point()
Orange %>% ggplot(aes(age, circumference)) + geom_point() + geom_line()
Orange %>% ggplot(aes(age, circumference color=Tree)) + geom_point() + geom_line()
Orange %>% ggplot(aes(age, circumference, color=Tree)) + geom_point() + geom_line()
str(Orange)
?Orange
data("Orange")
Orange %>% ggplot(aes(age, circumference, color=Tree)) + geom_point() + geom_line()
Orange %>% ggplot(aes(age, circumference, color=Tree)) + geom_point() + geom_line() + facet_wrap(~Tree)
head(Titanic)
TItanic
Titanic
Titanic
ls()
ChickWeight
ChickWeight
?ChickWeight
ChickWeight$Diet
ChickWeight %>% str
ggplot(ChickWeight)+
geom_violin(aes(Time, weight))
ggplot(ChickWeight)+
geom_violin(aes(Time, weight))
ggplot(ChickWeight)+
geom_violin(aes(Time, Diet))
ggplot(ChickWeight)+
geom_violin(aes(Time, Diet))
ggplot(ChickWeight)+
geom_violin(aes(Time, weight))
ggplot(ChickWeight)+
geom_violin(aes(as.character(Time), weight))
ggplot(ChickWeight)+
geom_violin(aes(Diet, weight))
ggplot(ChickWeight)+
geom_boxplot(aes(Diet, weight))
coplot(weight ~ Time | Chick, data = ChickWeight,
type = "b", show.given = FALSE)
coplot(weight ~ Time | Chick, data = ChickWeight,
type = "b", show.given = FALSE)
ggplot(ChickWeight)+
geom_boxplot(aes(Time, weight))
ggplot(ChickWeight)+
geom_boxplot(aes(as.factor(Time), weight))
ggplot(ChickWeight)+
geom_violin(aes(as.character(Time), weight))
ggplot(ChickWeight)+
geom_boxplot(aes(as.factor(Time), weight))
ggplot(ChickWeight)+
geom_violin(aes(weight))
ggplot(ChickWeight)+
geom_histogram(aes(weight))
ChickWeight$Time <- as.factor(ChickWeight$Time)
ggplot(ChickWeight)+
geom_boxplot(aes(Time, weight))
ggplot(ChickWeight)+
geom_violin(alpha = 0.8)+
geom_boxplot(width=0.1, fill="grey90")
ggplot(ChickWeight, aes(Time, weight))+
geom_violin(alpha = 0.8)+
geom_boxplot(width=0.1, fill="grey90")
ggplot(ChickWeight, aes(Time, weight))+
geom_violin(alpha = 0.8)
ggplot(ChickWeight, aes(Time, weight))+
geom_boxplot(width=0.1, fill="grey90")
ggplot(ChickWeight, aes(Time, weight))+
geom_boxplot()
ggplot(ChickWeight, aes(Time, weight, fill=Diet))+
geom_boxplot()
ggplot(ChickWeight, aes(Time, weight))+
geom_boxplot()
ggplot(ChickWeight, aes(Time, weight, fill=Diet))+
geom_boxplot()
ggplot(ChickWeight, aes(Diet, weight))+
geom_boxplot()
ggplot(ChickWeight)+
geom_boxplot(aes(as.factor(Time), weight))?Orange
?orange
datasets::Orange
data("Orange")
?Orange
ggplot(Orange, aes(age, circumference, color = Tree))+
geom_point()
library(ggplot2)
data("Orange")
ggplot(Orange, aes(age, circumference))+
geom_point()
ggplot(Orange, aes(age, circumference, color = Tree))+
geom_point()
library(cowplot)
plot_grid(g1,g2)
library(cowplot)
g1 <- ggplot(Orange, aes(age, circumference))+
geom_point()
g2 <- ggplot(Orange, aes(age, circumference))+
geom_line()
plot_grid(g1,g2)
ggplot(Orange, aes(age, circumference, color = Tree))+
geom_line()
library(cowplot)
g1 <- ggplot(Orange, aes(age, circumference, color = Tree))+
geom_point()
g2 <- ggplot(Orange, aes(age, circumference, color = Tree))+
geom_line()
plot_grid(g1,g2)
ggplot(Orange, aes(age, circumference, color = Tree))+
geom_point()+
geom_line()+
facet_wrap(~Tree)
