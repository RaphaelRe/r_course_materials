---
title: "Exercise 2: Solutions second part"
format: html
toc: false
---
  

## Task 2.1

### Write a function that checks whether the length of an is one. If this is the case, the function should return `TRUE`.

```{r}
check_length_one <- function(x) {
  is_len1 <- length(x) == 1
  return(is_len1)
}

check_length_one("a")

check_length_one(1:3)
```


  
  

## Task 2.2

### Write a function that takes a list as input. The function should iterate over the list elements and check whether each of the elements has length 1.

```{r}
check_list_elements_length_one <- function(lst) {
  # Initialize a logical vector to store the results
  result <- logical(length = length(lst))
  
  # Iterate over the list elements
  for (i in 1:length(lst)) {
    result[i] <- check_length_one(lst[[i]])
  }
  
  return(result)
}

check_list_elements_length_one(list(1,2,3))
check_list_elements_length_one(list(1:2,2,3))
```

Consider the function `seq_along(lst)` instead of `1:length(lst)` for the loop. This will create a vector of the appropriate length, i.e. `1:length(list)` with better behavior for edge cases (e.g. for zero length).





## Task 2.3

### Write a function that expects a list as input. The function should the same as from task 2.2. If all elements of the list are of length 1, concatenate them to one long character.

```{r}
concatenate_if_all_length_one <- function(lst) {
  # Check if all elements have length 1
  if (all(check_list_elements_length_one(lst))) {
    # Concatenate the elements into one long character sentence
    return(paste(unlist(lst), collapse = " "))
  } else {
    print("At least one element of the list has length > 1! Returning FALSE")
    return(FALSE)
  }
}

# Test the function on different inputs
concatenate_if_all_length_one(list("Hello", "world"))
concatenate_if_all_length_one(list(123))
concatenate_if_all_length_one(list(1, 2, 3, "a", "b", "c"))

```






