{
  "hash": "e3bf36b1bd3882f5211b61fca9c8957b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modern data manipulation: <br> dplyr and data.table\"\nauthor: Raphael Rehms\nformat: \n  revealjs:\n    scrollable: true\n    theme: solarized # moon\n    transition: slide\n    footer: \"dplyr and data.table\"\n    slide-number: c\n    include-after-body: clean_title_page.html\n    fontsize: 25pt\n    highlight-style: github\nexecute: \n  echo: true\n  freeze: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# dplyr\n\n## Basics\n\n`dplyr` is an `R` package that implements an advanced version of\nstandard data frames\n\nFrom the [official website](https://dplyr.tidyverse.org/):\n\n*\"dplyr is a grammar of data manipulation, providing a consistent set of\nverbs that help you solve the most common data manipulation challenges\"*\n\n-   Part of the \\`tidyverse\\` (package collection)\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(dplyr)\n    ```\n    :::\n\n\n\n## pipe %\\>%\n\nThe `%>%` is an operator to concatenate function calls. Originally from\nthe \\``magrittr`\\` package.\n\nA short example will show this merits:\n\n-   Take a list of numbers.\n\n-   Square each number.\n\n-   Sum the squared values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Without using pipe operator\n\nsum(sapply(list(1, 2, 3, 4),function(x) x^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use pipe\nlist(1, 2, 3, 4) %>%\n  sapply(function(x) x^2) %>%\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n\n\nThere is a keyboard shortcut to insert the pip. On my config, it is\n`Ctrl + Shift + m`\\`\n\nThe pipe was so popular, that there is an official implementation in\nbase R (\\`\\|\\>\\`). However, I prefer `%>%` for reasons...\n\n## tibble\n\nHere, we use the `starwars` data set from the `dplyr` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 <NA>       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 <NA>       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n\n-   Data class is now \\`tibble\\`\n\n-   Slightly more informative than standard data frame\n\n-   We can define a tibble by using the according function, e.g.\n    `tibble(iris)`\n\n-   A tibble behaves like a standard data frame (e.g. is is still\n    list-like)\n\n## Basic operations\n\nSelect rows and columns\n\n-   We can use `filter` to select rows with defined conditions\n\n-   We can use `select` to select columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  filter(height > 170, mass < 130) %>%\n  select(name, homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 37 × 2\n   name              homeworld \n   <chr>             <chr>     \n 1 Luke Skywalker    Tatooine  \n 2 Owen Lars         Tatooine  \n 3 Biggs Darklighter Tatooine  \n 4 Obi-Wan Kenobi    Stewjon   \n 5 Anakin Skywalker  Tatooine  \n 6 Chewbacca         Kashyyyk  \n 7 Han Solo          Corellia  \n 8 Greedo            Rodia     \n 9 Jek Tono Porkins  Bestine IV\n10 Boba Fett         Kamino    \n# ℹ 27 more rows\n```\n\n\n:::\n:::\n\n\n\n-   Note that we can call variables from the data set without `$`\n\n## Basic operations\n\nDefine new variables\n\n-   We can use `mutate` to define new variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  mutate(bmi = mass / (height/100)^2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 6 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, bmi <dbl>\n```\n\n\n:::\n:::\n\n\n\n-   Note that we returned the data here!\n\n-   Hence, no *inplace* operation. Use `<-` or `%<>%` to for an\n    assigment\n\n## Group and summary operations\n\n-   Use `group_by` to make a operations on subgroups\n\n-   Use `summarise` to summarize variables\n\n-   Sort results using `arrange` and possibly `desc`\n\nQuestion: What is the mean height and weight for each species? Sort the\nresult by weight in descending order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  group_by(species) %>% \n  summarise(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE),\n  ) %>% \n  arrange(desc(mean_weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 3\n   species      mean_height mean_weight\n   <chr>              <dbl>       <dbl>\n 1 Hutt                 175        1358\n 2 Kaleesh              216         159\n 3 Wookiee              231         124\n 4 Trandoshan           190         113\n 5 Besalisk             198         102\n 6 Neimodian            191          90\n 7 Kaminoan             221          88\n 8 Nautolan             196          87\n 9 Mon Calamari         180          83\n10 Cerean               198          82\n# ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\n\n## A lot more...\n\nWe can only scratch on the surface. See the webpage for more examples:\n\n<https://dplyr.tidyverse.org/index.html>\n\n# data.table\n\n## data. table\n\n-   `data.table` is used for large data sets and is designed to be\n    fast and memory efficient.\n\n-   Like a `tibble`, it is a 'list-like' object.\n\n-   We stick to the starwars data set:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(data.table)\n    \n    sw_dt <- starwars\n    setDT(sw_dt)\n    head(sw_dt)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                 name height  mass  hair_color  skin_color eye_color birth_year\n               <char>  <int> <num>      <char>      <char>    <char>      <num>\n    1: Luke Skywalker    172    77       blond        fair      blue       19.0\n    2:          C-3PO    167    75        <NA>        gold    yellow      112.0\n    3:          R2-D2     96    32        <NA> white, blue       red       33.0\n    4:    Darth Vader    202   136        none       white    yellow       41.9\n    5:    Leia Organa    150    49       brown       light     brown       19.0\n    6:      Owen Lars    178   120 brown, grey       light      blue       52.0\n          sex    gender homeworld species\n       <char>    <char>    <char>  <char>\n    1:   male masculine  Tatooine   Human\n    2:   none masculine  Tatooine   Droid\n    3:   none masculine     Naboo   Droid\n    4:   male masculine  Tatooine   Human\n    5: female  feminine  Alderaan   Human\n    6:   male masculine  Tatooine   Human\n                                                                                                                       films\n                                                                                                                      <list>\n    1:                           A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith,The Force Awakens\n    2:     A New Hope,The Empire Strikes Back,Return of the Jedi,The Phantom Menace,Attack of the Clones,Revenge of the Sith\n    3: A New Hope,The Empire Strikes Back,Return of the Jedi,The Phantom Menace,Attack of the Clones,Revenge of the Sith,...\n    4:                                             A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith\n    5:                           A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith,The Force Awakens\n    6:                                                                   A New Hope,Attack of the Clones,Revenge of the Sith\n                                vehicles               starships\n                                  <list>                  <list>\n    1: Snowspeeder,Imperial Speeder Bike X-wing,Imperial shuttle\n    2:                                                          \n    3:                                                          \n    4:                                           TIE Advanced x1\n    5:             Imperial Speeder Bike                        \n    6:                                                          \n    ```\n    \n    \n    :::\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}