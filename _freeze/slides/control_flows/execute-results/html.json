{
  "hash": "15f08d82bb25a53909988fe5abb92bd2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Control flows and programming\"\nauthor: Raphael Rehms\nformat: \n  revealjs:\n    scrollable: true\n    theme: solarized # moon\n    transition: slide\n    footer: \"Control flows and programming\"\n    slide-number: c\n    include-after-body: clean_title_page.html\n    fontsize: 25pt\n    highlight-style: github\nexecute: \n  echo: true\n  freeze: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# Functions\n\n## Functions so far...\n\nSo far, we called functions, to do things for us. E.g.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:5\nsin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(x, base=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.000000 1.000000 1.584963 2.000000 2.321928\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n\nWe also used functions to create data frames, inspect objects or\nload/save data. E.g.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mtcars, package = \"datasets\")\n\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n\n\n:::\n:::\n\n\n\n## Defining own functions\n\nWe can write our own functions, if we need one. In mathematical terms,\nthis is obvious:\n\nConsider a function $f(x) = x^2 + cos(x) + 2$.\n\nWe can automate the evaluation using our own defined function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_function <- function(x){\n  y <- x^2 + cos(x*3)*2 + 2\n  return(y)\n}\n```\n:::\n\n\n\nNote the `return(...)` statement at the end of the function\n\nWe can now use the function to calcualte the result for given values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(-2,2, length.out = 10)\ny <- our_function(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 7.920341 4.328340 1.271220 1.612151 3.621157 3.621157 1.612151 1.271220\n [9] 4.328340 7.920341\n```\n\n\n:::\n:::\n\n\n\n## Defining own functions cont'd\n\nWe can generalize this concept to arbitrary inputs (not only numerical). Here are two examples:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine three arguments and returns a list with all combinations concatenated\nfunction1 <- function(x, y, z){\n  element1 <- c(x,y)\n  element2 <- c(x,z)\n  element3 <- c(y, z)\n  element4 <- c(x, y, z)\n  \n  return(list(element1, element2, element3, element4))\n}\n\nfunction1(1,2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2\n\n[[2]]\n[1] 1 3\n\n[[3]]\n[1] 2 3\n\n[[4]]\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nfunction1(\"a\", \"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"a\" \"b\"\n\n[[2]]\n[1] \"a\" \"c\"\n\n[[3]]\n[1] \"b\" \"c\"\n\n[[4]]\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# A function, that sum up the columns and rows of a matrix with additional info\nfunction2 <- function(m){\n  print(\"Dimension of input matrix:\")\n  print(dim(m))\n  \n  rs <- rowSums(m)\n  cs <- colSums(m)\n  s <- sum(m)\n  \n  return(list(RowSums = rs, ColSums = cs, FullSum = s))\n}\n\nm1 <- matrix(1:9, 3,3)\nm2 <- matrix(-100:100, 100,2)\n\nfunction2(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Dimension of input matrix:\"\n[1] 3 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$RowSums\n[1] 12 15 18\n\n$ColSums\n[1]  6 15 24\n\n$FullSum\n[1] 45\n```\n\n\n:::\n\n```{.r .cell-code}\nfunction2(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Dimension of input matrix:\"\n[1] 100   2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$RowSums\n  [1] -100  -98  -96  -94  -92  -90  -88  -86  -84  -82  -80  -78  -76  -74  -72\n [16]  -70  -68  -66  -64  -62  -60  -58  -56  -54  -52  -50  -48  -46  -44  -42\n [31]  -40  -38  -36  -34  -32  -30  -28  -26  -24  -22  -20  -18  -16  -14  -12\n [46]  -10   -8   -6   -4   -2    0    2    4    6    8   10   12   14   16   18\n [61]   20   22   24   26   28   30   32   34   36   38   40   42   44   46   48\n [76]   50   52   54   56   58   60   62   64   66   68   70   72   74   76   78\n [91]   80   82   84   86   88   90   92   94   96   98\n\n$ColSums\n[1] -5050  4950\n\n$FullSum\n[1] -100\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Exercises 2 Tasks 1\n\n\n\n# Conditions\n\n## If-else statement\n\nConsider a function that should do something. However, it depends on the\ninput type.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function should sum up the values. If it is of type character, it should just paste everything together\ntyped_sum <- function(x){\n  if (class(x) == \"character\") {\n    ret <- paste(x, collapse = \" \")\n  } else {\n    ret <- sum(x)\n  }\n  return(ret)\n}\n  \ntyped_sum(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\ntyped_sum(c(\"This\", \"will\", \"be\", \"one\", \"sentence\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This will be one sentence\"\n```\n\n\n:::\n:::\n\n\n\n-   The `else {...}` is optional.\n-   If more conditions are required, one can use `else if {...}`\n\n# Loops\n\n## For loops\n\nSo far, we can automate code now using functions. But we can automate\neven more using a loop!\n\nAn short example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in x) {\n  print(i)  # print each element of a vector on after another\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n```\n\n\n:::\n:::\n\n\n\nA more complex example:\n\nLet's calculate the\n[Fibonacci](https://www.mathsisfun.com/numbers/fibonacci-sequence.html)\nsequence until 10.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- rep(0, 10) # this is a container where we will store the solution\na[2] <- 1\n\n# here we need a for loop because we must access the two arguments calculated in the steps before\nfor (i in 3:10) {\n  a[i] <- a[i-2] + a[i-1]\n}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  1  1  2  3  5  8 13 21 34\n```\n\n\n:::\n:::\n\n\n\n## while loops\n\nWe can also repeat operations until a defined condition is met.\n\nIn this example, we sum the elements in a vector until they exceed 100.\nWe also print the number of used elements.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(11, 20, 1, 44, 99, 2000, 100)\n\ndynamic_sum <- 0\ni <- 1\nwhile (dynamic_sum < 100) {\n  i <- i + 1\n  dynamic_sum <- sum(x[1:i])\n}\nprint(paste(\"Used elements of the vector:\", i))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Used elements of the vector: 5\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Sum is:\", dynamic_sum))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sum is: 175\"\n```\n\n\n:::\n:::\n\n\n\n[**Note that you can use loops in functions as\nwell**]{style=\"color:blue;\"}\n\n\n\n# Exercises 2 Tasks 2\n\n\n# apply-family\n\n## lapply\n\n-   Consider an operation, that you want to apply to each element of a\n    list. You have 3 options: Write code for each list element\n\n-   Iterate over all list elements and call a function to with each element , i.e. in each iteration\n\n-   Apply the function to each element directly\n\n![](map.png)\n\n## lapply examples\n\nEasy example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(1:5, 1:100, 1:1000)\nlapply(l, sum)  # calculate the sum of each element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 15\n\n[[2]]\n[1] 5050\n\n[[3]]\n[1] 500500\n```\n\n\n:::\n:::\n\n\n\nData frames are just lists! So we can use this fact here. We may\ncalculate the maximum value of each column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris) # iris data set has a factor. max() is not meaningful on factors.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nlapply(iris[, 1:4], max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Sepal.Length\n[1] 7.9\n\n$Sepal.Width\n[1] 4.4\n\n$Petal.Length\n[1] 6.9\n\n$Petal.Width\n[1] 2.5\n```\n\n\n:::\n:::\n\n\n\n## sapply\n\n`sapply` is basically the same as lapply, but tries to simplify the\nresult. In our last example, this makes sense: Each element is just a\nnumber.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(iris[, 1:4], max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n         7.9          4.4          6.9          2.5 \n```\n\n\n:::\n:::\n\n\n\n## apply\n\nThere is a basic `apply` function. It is intended to apply a function on\nan *array*. We have to specify the *margin*. This defines, on which\naxis, the function should be applied.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(m <- matrix(1:6, 3, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n\n\n:::\n\n```{.r .cell-code}\napply(m, MARGIN = 1, FUN = sum)  # rowsums\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 7 9\n```\n\n\n:::\n\n```{.r .cell-code}\napply(m, MARGIN = 2, FUN = sum)   # colsums\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6 15\n```\n\n\n:::\n\n```{.r .cell-code}\napply(m, MARGIN = 1:2, FUN = sum)  # sum on each element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\nApply on data frames will cast a data frame into a matrix with\n(as.matrix/array!)\n:::\n\n## Other apply functions\n\nThere are a lot of other apply functions. To name some of them:\n\n-   `mapply` (apply a function to multiple vectors/lists)\n\n-   `tapply` (apply over ragged vectors)\n\n-   `pbapply` (adds a progress bar, package: `pbapply`)\n\n-   `mclapply` (parallel version of lapply, package: `parallel`)\n\n\n\n# Exercises 2 Tasks 3\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}