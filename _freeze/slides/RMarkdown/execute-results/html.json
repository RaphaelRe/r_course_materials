{
  "hash": "8f362cc419cf082551422e59f700a90e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Markdown and automatic reporting\"\nauthor: Raphael Rehms\nformat: \n  revealjs:\n    scrollable: true\n    theme: solarized # moon\n    transition: slide\n    footer: \"R Markdown and automatic reporting\"\n    slide-number: c\n    include-after-body: clean_title_page.html\n    fontsize: 25pt\n    highlight-style: github\nexecute: \n  echo: true\n  freeze: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n\n\n# Automatic reporting\n\n## Standard way\n\n1.  Run analysis code - Generate graphics - Generate tables - Other\n    quantities (single numbers or summary statistics)\n\n2.  Save it\n\n3.  Import it into you report script\n\n4.  Something changed due to reasons...\n\n    -   data changed\n    -   forgot something\n    -   style changes\n    -   ... ... and repeat 1-3\n\n## Pros / Cons\n\n### Pros\n\n-   No need to learn new tools\n-   Post processing of graphics possible\n\n### Cons\n\n-   Time consuming\n-   Error prone\n-   Reproducibility questionable\n\n\\# R Markdown\n\n## Dynamic reporting with R Markdown\n\n-   Combine report and analysis in one document:\n\n    -   Write report in an `.Rmd` file\n    -   Integrate code to produce results *in the same* document\n    -   Generate report from the document\n\n-   R Markdown combines Markdown (`.md`) with the R code\n\n-   Markdown is a simple markup language\n\n-   Done by the R package `knitr`: Runs R code and integrates the result\n    automatically in a markdown document\n\n## How to do?\n\n1.  Open new RMarkdown document\n2.  Write content\n3.  Render the document\n\nRmd files contain 3 parts:\n\n-   YAML header\n-   Markdown text\n-   R chunks\n\n## YAML header\n\n-   The header defines 'global options' such as\n    -   Title\n    -   Author\n    -   Date\n    -   Output format (e.g. pdf_document, html_document, word_document)\n    -   Style\n\n## Markdown Text\n\n-   Write text using markdown syntax:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Header 1\n## Header 2\n### Header 3\n```\n:::\n\n\n\n\n\n\nNote the space after #!\n\n\n\n\n\n\n::: {.cell}\n\n```{.markdown .cell-code}\nBackticks for `Code`\n*Text in italics*\n**Text in bold**\n***Text in italics and bold***\n```\n:::\n\n\n\n\n\n\nSpecial symbols require a `\\` in front, e.g. `\\#` for `#`\n\nMath can be included using `$` inline or `$$` for math block.\n\n-   e.g. `$\\alpha$` will get $\\alpha$\n\n-   e.g. the following\n\n```         \n$$\n \\sum_{i = 1}^N X_i\n$$\n```\n\nwill get $$\n \\sum_{i = 1}^N X_i\n$$\n\n## Code chunks\n\n-   Code chunks contain the code, that we want to use in the markdown\n    document.\n-   Either use the button, `Crtl+Alt+I` or write it by wrapping code\n    using bakcticks\n-   Code chunks look like this:\n\n\\`\\`\\`{r}\n\n### \n\n`R code here`\n\n### \n\n\\`\\`\\`\n\n-   You can add further arguments in the code chunk header or a name,\n    e.g.\n\n\\`\\`\\`{rÂ Figure 1, eval=TRUE, echo=FALSE}\n\n### \n\n`R code here`\n\n### \n\n\\`\\`\\`\n\n-   We can inline code evaluation using only one backtick and `r` like\n    this:\n\n\\` r 1 + 1 \\` will just evaluated to 2\n\n<br>\n\n**Look at the cheat sheets on the web, e.g.**\n\n-    **[this](https://github.com/lifeparticle/Markdown-Cheatsheet) for\n    general markdown or**\n\n-   \n    **[this](https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf&ved=2ahUKEwiQi6fr9_GHAxUu-AIHHU24KeAQFnoECAkQAQ&usg=AOvVaw0EdaMWRMevvsxYfQzsnSR4)\n    for R Markdown**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}