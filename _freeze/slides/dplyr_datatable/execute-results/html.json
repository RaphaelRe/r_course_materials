{
  "hash": "03c608025d6294fc8d70ac0b04dc224c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modern data manipulation: <br> dplyr and data.table\"\nauthor: Raphael Rehms\nformat: \n  revealjs:\n    scrollable: true\n    theme: solarized # moon\n    transition: slide\n    footer: \"dplyr and data.table\"\n    slide-number: c\n    include-after-body: clean_title_page.html\n    fontsize: 25pt\n    highlight-style: github\nexecute: \n  echo: true\n  freeze: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n\n\n# dplyr\n\n## Basics\n\n`dplyr` is an `R` package that implements an advanced version of\nstandard data frames\n\nFrom the [official website](https://dplyr.tidyverse.org/):\n\n*\"dplyr is a grammar of data manipulation, providing a consistent set of\nverbs that help you solve the most common data manipulation challenges\"*\n\n-   Part of the \\`tidyverse\\` (package collection)\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(dplyr)\n    ```\n    :::\n\n\n\n\n\n\n## pipe %\\>%\n\nThe `%>%` is an operator to concatenate function calls. Originally from\nthe \\``magrittr`\\` package.\n\nA short example will show this merits:\n\n-   Take a list of numbers.\n\n-   Square each number.\n\n-   Sum the squared values.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Without using pipe operator\n\nsum(sapply(list(1, 2, 3, 4),function(x) x^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use pipe\nlist(1, 2, 3, 4) %>%\n  sapply(function(x) x^2) %>%\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere is a keyboard shortcut to insert the pip. On my config, it is\n`Ctrl + Shift + m`\\`\n\nThe pipe was so popular, that there is an official implementation in\nbase R (\\`\\|\\>\\`). However, I prefer `%>%` for reasons...\n\n## tibble\n\nHere, we use the `starwars` data set from the `dplyr` package.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 <NA>       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 <NA>       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Data class is now \\`tibble\\`\n\n-   Slightly more informative than standard data frame\n\n-   We can define a tibble by using the according function, e.g.\n    `tibble(iris)`\n\n-   A tibble behaves like a standard data frame (e.g. is is still\n    list-like)\n\n## Basic operations\n\nSelect rows and columns\n\n-   We can use `filter` to select rows with defined conditions\n\n-   We can use `select` to select columns\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  filter(height > 170, mass < 130) %>%\n  select(name, homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 37 × 2\n   name              homeworld \n   <chr>             <chr>     \n 1 Luke Skywalker    Tatooine  \n 2 Owen Lars         Tatooine  \n 3 Biggs Darklighter Tatooine  \n 4 Obi-Wan Kenobi    Stewjon   \n 5 Anakin Skywalker  Tatooine  \n 6 Chewbacca         Kashyyyk  \n 7 Han Solo          Corellia  \n 8 Greedo            Rodia     \n 9 Jek Tono Porkins  Bestine IV\n10 Boba Fett         Kamino    \n# ℹ 27 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Note that we can call variables from the data set without `$`\n\n## Basic operations\n\nDefine new variables\n\n-   We can use `mutate` to define new variables\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  mutate(bmi = mass / (height/100)^2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 6 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, bmi <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Note that we returned the data here!\n\n-   Hence, no *inplace* operation. Use `<-` or `%<>%` to for an\n    assigment\n\n## Group and summary operations\n\n-   Use `group_by` to make a operations on subgroups\n\n-   Use `summarise` to summarize variables\n\n-   Sort results using `arrange` and possibly `desc`\n\nQuestion: What is the mean height and weight for each species? Sort the\nresult by weight in descending order.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  group_by(species) %>% \n  summarise(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE),\n  ) %>% \n  arrange(desc(mean_weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 3\n   species      mean_height mean_weight\n   <chr>              <dbl>       <dbl>\n 1 Hutt                 175        1358\n 2 Kaleesh              216         159\n 3 Wookiee              231         124\n 4 Trandoshan           190         113\n 5 Besalisk             198         102\n 6 Neimodian            191          90\n 7 Kaminoan             221          88\n 8 Nautolan             196          87\n 9 Mon Calamari         180          83\n10 Cerean               198          82\n# ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## A lot more...\n\nWe can only scratch on the surface. See the webpage for more examples:\n\n<https://dplyr.tidyverse.org/index.html>\n\n# data.table\n\n## data. table\n\n-   `data.table` is used for large data sets and is designed to be\n    fast and memory efficient.\n\n-   Like a `tibble`, it is a 'list-like' object.\n\n-   We stick to the starwars data set:\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(data.table)\n    \n    sw_dt <- starwars\n    setDT(sw_dt)\n    head(sw_dt)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                 name height  mass  hair_color  skin_color eye_color birth_year\n               <char>  <int> <num>      <char>      <char>    <char>      <num>\n    1: Luke Skywalker    172    77       blond        fair      blue       19.0\n    2:          C-3PO    167    75        <NA>        gold    yellow      112.0\n    3:          R2-D2     96    32        <NA> white, blue       red       33.0\n    4:    Darth Vader    202   136        none       white    yellow       41.9\n    5:    Leia Organa    150    49       brown       light     brown       19.0\n    6:      Owen Lars    178   120 brown, grey       light      blue       52.0\n          sex    gender homeworld species\n       <char>    <char>    <char>  <char>\n    1:   male masculine  Tatooine   Human\n    2:   none masculine  Tatooine   Droid\n    3:   none masculine     Naboo   Droid\n    4:   male masculine  Tatooine   Human\n    5: female  feminine  Alderaan   Human\n    6:   male masculine  Tatooine   Human\n                                                                                                                       films\n                                                                                                                      <list>\n    1:                           A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith,The Force Awakens\n    2:     A New Hope,The Empire Strikes Back,Return of the Jedi,The Phantom Menace,Attack of the Clones,Revenge of the Sith\n    3: A New Hope,The Empire Strikes Back,Return of the Jedi,The Phantom Menace,Attack of the Clones,Revenge of the Sith,...\n    4:                                             A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith\n    5:                           A New Hope,The Empire Strikes Back,Return of the Jedi,Revenge of the Sith,The Force Awakens\n    6:                                                                   A New Hope,Attack of the Clones,Revenge of the Sith\n                                vehicles               starships\n                                  <list>                  <list>\n    1: Snowspeeder,Imperial Speeder Bike X-wing,Imperial shuttle\n    2:                                                          \n    3:                                                          \n    4:                                           TIE Advanced x1\n    5:             Imperial Speeder Bike                        \n    6:                                                          \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n-   data.table implements the function `fread` for fast and easy file reading.\n\n\n## general syntax\n\ndata.table uses as basic syntac\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT[i, j, by]\n```\n:::\n\n\n\n\n\n\nwith an analogy to SQL:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT[where | order by,  select | update ,  group by]\n```\n:::\n\n\n\n\n\n\n-   `i` to filter rows or order\n\n-   `j` to select columns OR create new ones\n\n-   `by` to do it for subgroups\n\n::: callout-warning\nWrap `j` in a `list()` or its *alias* in DT `.()` to ensure a data table object! $\\rightarrow$ see exercise.\n:::\n\n## Example from before\n\ndplyr\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  filter(height > 170, mass < 130) %>%\n  select(name, homeworld)\n```\n:::\n\n\n\n\n\n\n\ndata.table\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw_dt[height > 170 & mass < 130, .(name, homeworld)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 name      homeworld\n               <char>         <char>\n 1:    Luke Skywalker       Tatooine\n 2:         Owen Lars       Tatooine\n 3: Biggs Darklighter       Tatooine\n 4:    Obi-Wan Kenobi        Stewjon\n 5:  Anakin Skywalker       Tatooine\n 6:         Chewbacca       Kashyyyk\n 7:          Han Solo       Corellia\n 8:            Greedo          Rodia\n 9:  Jek Tono Porkins     Bestine IV\n10:         Boba Fett         Kamino\n11:             Bossk      Trandosha\n12:  Lando Calrissian        Socorro\n13:             Lobot         Bespin\n14:            Ackbar       Mon Cala\n15:      Qui-Gon Jinn           <NA>\n16:       Nute Gunray Cato Neimoidia\n17:     Padmé Amidala          Naboo\n18:     Jar Jar Binks          Naboo\n19:      Roos Tarpals          Naboo\n20:        Darth Maul       Dathomir\n21:       Ayla Secura         Ryloth\n22:        Mace Windu     Haruun Kal\n23:      Ki-Adi-Mundi          Cerea\n24:         Kit Fisto    Glee Anselm\n25:        Adi Gallia      Coruscant\n26:          Plo Koon          Dorin\n27:      Gregar Typho          Naboo\n28: Poggle the Lesser       Geonosis\n29:             Dooku        Serenno\n30:        Jango Fett   Concord Dawn\n31:   Dexter Jettster           Ojom\n32:           Lama Su         Kamino\n33:        Wat Tambor          Skako\n34:          Shaak Ti          Shili\n35:   Raymus Antilles       Alderaan\n36:         Sly Moore         Umbara\n37:        Tion Medon         Utapau\n                 name      homeworld\n```\n\n\n:::\n\n```{.r .cell-code}\n# sw_dt[height > 170 & mass < 130, list(name, homeworld)]  # the same\n```\n:::\n\n\n\n\n\n\n\n## Special argument .N\n\n -    data.table uses `.N` to count rows (in a group)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars[species == \"Human\", .N]  # 35 humans in the data set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n:::\n\n\n\n\n\n \n -    we can combine it with `by` to count the number in each group\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(starwars[,.N, by = species])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   species     N\n    <char> <int>\n1:   Human    35\n2:   Droid     6\n3: Wookiee     2\n4:  Rodian     1\n5:    Hutt     1\n6:    <NA>     4\n```\n\n\n:::\n:::\n\n\n\n\n\n \n\n\n## More complex example from before\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  group_by(species) %>% \n  summarise(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE),\n  ) %>% \n  arrange(desc(mean_weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 3\n   species      mean_height mean_weight\n   <chr>              <dbl>       <dbl>\n 1 Hutt                 175        1358\n 2 Kaleesh              216         159\n 3 Wookiee              231         124\n 4 Trandoshan           190         113\n 5 Besalisk             198         102\n 6 Neimodian            191          90\n 7 Kaminoan             221          88\n 8 Nautolan             196          87\n 9 Mon Calamari         180          83\n10 Cerean               198          82\n# ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n -    Giving the list in `j` names to return a data.table with according names.\n \n -    We use the fact that the returned object is a data table\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw_dt[,.(\n    mean_height = mean(height, na.rm = TRUE),\n    mean_weight = mean(mass, na.rm = TRUE)\n), by = species][order(-mean_weight),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           species mean_height mean_weight\n            <char>       <num>       <num>\n 1:           Hutt    175.0000     1358.00\n 2:        Kaleesh    216.0000      159.00\n 3:        Wookiee    231.0000      124.00\n 4:     Trandoshan    190.0000      113.00\n 5:       Besalisk    198.0000      102.00\n 6:      Neimodian    191.0000       90.00\n 7:       Kaminoan    221.0000       88.00\n 8:       Nautolan    196.0000       87.00\n 9:   Mon Calamari    180.0000       83.00\n10:         Cerean    198.0000       82.00\n11:          Human    178.0000       81.31\n12:           <NA>    175.0000       81.00\n13:         Zabrak    173.0000       80.00\n14:        Kel Dor    188.0000       80.00\n15:      Geonosian    183.0000       80.00\n16:         Pau'an    206.0000       80.00\n17:         Rodian    173.0000       74.00\n18:         Gungan    208.6667       74.00\n19:          Droid    131.2000       69.75\n20:      Sullustan    160.0000       68.00\n21:          Toong    163.0000       65.00\n22:        Togruta    178.0000       57.00\n23:        Twi'lek    179.0000       55.00\n24:       Clawdite    168.0000       55.00\n25:       Mirialan    168.0000       53.10\n26:     Tholothian    184.0000       50.00\n27:        Skakoan    193.0000       48.00\n28:     Vulptereen     94.0000       45.00\n29:            Dug    112.0000       40.00\n30:           Ewok     88.0000       20.00\n31: Yoda's species     66.0000       17.00\n32:         Aleena     79.0000       15.00\n33:      Toydarian    137.0000         NaN\n34:          Xexto    122.0000         NaN\n35:       Iktotchi    188.0000         NaN\n36:       Quermian    264.0000         NaN\n37:       Chagrian    196.0000         NaN\n38:           Muun    191.0000         NaN\n           species mean_height mean_weight\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Example with multiple arguments in group\n\nWe want to find out what the max and min value of height for each subgroup of species and gender is. We also want to know, how many data points were used to calculate the result:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw_dt[,.(minimum = min(height, na.rm = T), \n         maximum = (max(height, na.rm = T)),\n         .N),   # no name used for .N!\n      by = .(species, gender)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           species    gender minimum maximum     N\n            <char>    <char>   <int>   <int> <int>\n 1:          Human masculine     170     202    26\n 2:          Droid masculine      96     200     5\n 3:          Human  feminine     150     185     9\n 4:        Wookiee masculine     228     234     2\n 5:         Rodian masculine     173     173     1\n 6:           Hutt masculine     175     175     1\n 7:           <NA>      <NA>     157     185     4\n 8: Yoda's species masculine      66      66     1\n 9:     Trandoshan masculine     190     190     1\n10:   Mon Calamari masculine     180     180     1\n11:           Ewok masculine      88      88     1\n12:      Sullustan masculine     160     160     1\n13:      Neimodian masculine     191     191     1\n14:         Gungan masculine     196     224     3\n15:      Toydarian masculine     137     137     1\n16:            Dug masculine     112     112     1\n17:         Zabrak masculine     171     175     2\n18:        Twi'lek masculine     180     180     1\n19:        Twi'lek  feminine     178     178     1\n20:         Aleena masculine      79      79     1\n21:     Vulptereen masculine      94      94     1\n22:          Xexto masculine     122     122     1\n23:          Toong masculine     163     163     1\n24:         Cerean masculine     198     198     1\n25:       Nautolan masculine     196     196     1\n26:     Tholothian  feminine     184     184     1\n27:       Iktotchi masculine     188     188     1\n28:       Quermian masculine     264     264     1\n29:        Kel Dor masculine     188     188     1\n30:       Chagrian masculine     196     196     1\n31:      Geonosian masculine     183     183     1\n32:       Mirialan  feminine     166     170     2\n33:       Clawdite  feminine     168     168     1\n34:       Besalisk masculine     198     198     1\n35:       Kaminoan masculine     229     229     1\n36:       Kaminoan  feminine     213     213     1\n37:          Droid  feminine      96      96     1\n38:        Skakoan masculine     193     193     1\n39:           Muun masculine     191     191     1\n40:        Togruta  feminine     178     178     1\n41:        Kaleesh masculine     216     216     1\n42:         Pau'an masculine     206     206     1\n           species    gender minimum maximum     N\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## New variables\n\n -    When we define new variables in base data sets, this invokes a deep copy (very inefficient)\n \n -    data.table relies on *reference* using a custom operator `:=`\n \nWe create a new variable `bmi`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw_dt[, bmi := mass / (height/100)^2]\n```\n:::\n\n\n\n\n\n \nThis is a lot more efficient as we fo not make a copy of the full data set.\n\n<br>\n<br>\n\n### Delete variables\n -    We can delete variables from the data table by assigning a `NULL` to it:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw_dt[, vehicles := NULL]\n```\n:::\n\n\n\n\n\n\n\n\n## New variables cont'd\n`:=` can also be used... \n\n -    to assign multiple variables\n\n -    in combination with selection of rows\n \n -    in combination with `by` and `.N`\n \nHere we make an example where we calculate the mean bmi (by hand) and its contribution (in %) to the common weight of all individuals from one species. \n\n -    We don't create a new data table, but add the information to the original one:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw_dt[, c(\"mean_bmi\", \"mass_contrib\") := .(sum(mass/(height/100)^2, na.rm=T)/.N, \n                                             mass/sum(mass, na.rm = T)*100), \n      by = species]\n\n# look at the data set\nsw_dt[, .(name, species, bmi, mean_bmi, mass_contrib)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     name        species       bmi   mean_bmi mass_contrib\n                   <char>         <char>     <num>      <num>        <num>\n 1:        Luke Skywalker          Human  26.02758  14.243690     4.734965\n 2:                 C-3PO          Droid  26.89232  21.770756    26.881720\n 3:                 R2-D2          Droid  34.72222  21.770756    11.469534\n 4:           Darth Vader          Human  33.33007  14.243690     8.363055\n 5:           Leia Organa          Human  21.77778  14.243690     3.013160\n 6:             Owen Lars          Human  37.87401  14.243690     7.379166\n 7:    Beru Whitesun Lars          Human  27.54821  14.243690     4.611979\n 8:                 R5-D4          Droid  34.00999  21.770756    11.469534\n 9:     Biggs Darklighter          Human  25.08286  14.243690     5.165416\n10:        Obi-Wan Kenobi          Human  23.24598  14.243690     4.734965\n11:      Anakin Skywalker          Human  23.76641  14.243690     5.165416\n12:        Wilhuff Tarkin          Human        NA  14.243690           NA\n13:             Chewbacca        Wookiee  21.54509  23.191276    45.161290\n14:              Han Solo          Human  24.69136  14.243690     4.919444\n15:                Greedo         Rodian  24.72518  24.725183   100.000000\n16: Jabba Desilijic Tiure           Hutt 443.42857 443.428571   100.000000\n17:        Wedge Antilles          Human  26.64360  14.243690     4.734965\n18:      Jek Tono Porkins           <NA>  33.95062  18.483967    45.267490\n19:                  Yoda Yoda's species  39.02663  39.026630   100.000000\n20:             Palpatine          Human  25.95156  14.243690     4.611979\n21:             Boba Fett          Human  23.35095  14.243690     4.808757\n22:                 IG-88          Droid  35.00000  21.770756    50.179211\n23:                 Bossk     Trandoshan  31.30194  31.301939   100.000000\n24:      Lando Calrissian          Human  25.21625  14.243690     4.857951\n25:                 Lobot          Human  25.79592  14.243690     4.857951\n26:                Ackbar   Mon Calamari  25.61728  25.617284   100.000000\n27:            Mon Mothma          Human        NA  14.243690           NA\n28:          Arvel Crynyd          Human        NA  14.243690           NA\n29: Wicket Systri Warrick           Ewok  25.82645  25.826446   100.000000\n30:             Nien Nunb      Sullustan  26.56250  26.562500   100.000000\n31:          Qui-Gon Jinn          Human  23.89326  14.243690     5.472882\n32:           Nute Gunray      Neimodian  24.67038  24.670376   100.000000\n33:         Finis Valorum          Human        NA  14.243690           NA\n34:         Padmé Amidala          Human  13.14828  14.243690     2.767187\n35:         Jar Jar Binks         Gungan  17.18034  11.174272    44.594595\n36:          Roos Tarpals         Gungan  16.34247  11.174272    55.405405\n37:            Rugor Nass         Gungan        NA  11.174272           NA\n38:              Ric Olié          Human        NA  14.243690           NA\n39:                 Watto      Toydarian        NA   0.000000           NA\n40:               Sebulba            Dug  31.88776  31.887755   100.000000\n41:         Quarsh Panaka          Human        NA  14.243690           NA\n42:        Shmi Skywalker          Human        NA  14.243690           NA\n43:            Darth Maul         Zabrak  26.12245  13.061224   100.000000\n44:           Bib Fortuna        Twi'lek        NA   8.679460           NA\n45:           Ayla Secura        Twi'lek  17.35892   8.679460   100.000000\n46:          Ratts Tyerel         Aleena  24.03461  24.034610   100.000000\n47:              Dud Bolt     Vulptereen  50.92802  50.928022   100.000000\n48:               Gasgano          Xexto        NA   0.000000           NA\n49:        Ben Quadinaros          Toong  24.46460  24.464602   100.000000\n50:            Mace Windu          Human  23.76641  14.243690     5.165416\n51:          Ki-Adi-Mundi         Cerean  20.91623  20.916233   100.000000\n52:             Kit Fisto       Nautolan  22.64681  22.646814   100.000000\n53:             Eeth Koth         Zabrak        NA  13.061224           NA\n54:            Adi Gallia     Tholothian  14.76843  14.768431   100.000000\n55:           Saesee Tiin       Iktotchi        NA   0.000000           NA\n56:           Yarael Poof       Quermian        NA   0.000000           NA\n57:              Plo Koon        Kel Dor  22.63468  22.634676   100.000000\n58:            Mas Amedda       Chagrian        NA   0.000000           NA\n59:          Gregar Typho           <NA>  24.83565  18.483967    34.979424\n60:                 Cordé           <NA>        NA  18.483967           NA\n61:           Cliegg Lars          Human        NA  14.243690           NA\n62:     Poggle the Lesser      Geonosian  23.88844  23.888441   100.000000\n63:       Luminara Unduli       Mirialan  19.44637  18.795618    52.919021\n64:         Barriss Offee       Mirialan  18.14487  18.795618    47.080979\n65:                 Dormé          Human        NA  14.243690           NA\n66:                 Dooku          Human  21.47709  14.243690     4.919444\n67:   Bail Prestor Organa          Human        NA  14.243690           NA\n68:            Jango Fett          Human  23.58984  14.243690     4.857951\n69:            Zam Wesell       Clawdite  19.48696  19.486961   100.000000\n70:       Dexter Jettster       Besalisk  26.01775  26.017753   100.000000\n71:               Lama Su       Kaminoan  16.78076   8.390382   100.000000\n72:               Taun We       Kaminoan        NA   8.390382           NA\n73:            Jocasta Nu          Human        NA  14.243690           NA\n74:                R4-P17          Droid        NA  21.770756           NA\n75:            Wat Tambor        Skakoan  12.88625  12.886252   100.000000\n76:              San Hill           Muun        NA   0.000000           NA\n77:              Shaak Ti        Togruta  17.99015  17.990153   100.000000\n78:              Grievous        Kaleesh  34.07922  34.079218   100.000000\n79:               Tarfful        Wookiee  24.83746  23.191276    54.838710\n80:       Raymus Antilles          Human  22.35174  14.243690     4.857951\n81:             Sly Moore           <NA>  15.14960  18.483967    19.753086\n82:            Tion Medon         Pau'an  18.85192  18.851918   100.000000\n83:                  Finn          Human        NA  14.243690           NA\n84:                   Rey          Human        NA  14.243690           NA\n85:           Poe Dameron          Human        NA  14.243690           NA\n86:                   BB8          Droid        NA  21.770756           NA\n87:        Captain Phasma          Human        NA  14.243690           NA\n                     name        species       bmi   mean_bmi mass_contrib\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNote that the mean bmi here is so small because be calculated it by hand using `/.N`! So we ignore NAs here...It is rather an example to show a potential use for `.N`.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}