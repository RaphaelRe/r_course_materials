{
  "hash": "8e24c3146e910e0ccbed71198cb636e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot and visualizations\"\nauthor: Raphael Rehms\nformat: \n  revealjs:\n    scrollable: true\n    theme: solarized # moon\n    transition: slide\n    footer: \"Control flows and programming\"\n    slide-number: c\n    include-after-body: clean_title_page.html\n    fontsize: 25pt\n    highlight-style: github\nexecute: \n  echo: true\n  freeze: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# ggplot2\n\n## What is ggplot2?\n\n-   **ggplot2** is a powerful data visualization package in R.\n-   It implements the *Grammar of Graphics*, allowing users to build\n    complex plots from simple components.\n-   Part of the `tidyverse`.\n-   Install `ggplot2`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\n\n-   load library in your script\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n## General sytax\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ..., mapping = aes(...)) + \n  geom_... +\n  ... +\n  ...\n```\n:::\n\n\n\n-   `data`: the function expects a data frame\n-   `mapping(...)` Aesthetic mappings: Defines the variables that are\n    mapped to certain visual properties with a function `aes(...)`\n-   `geom_...`: Geometric objects defining the type of plot\n\n## A first example: Scatterplot\n\n-   We use `iris` data set as an working example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata(\"iris\", package = \"datasets\")\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n\n\n-   A scatterplot can be specified using `geom_point()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width))+\n  geom_point()\n```\n:::\n\n\n\n-   Note that the variable names are *not* in quote marks. Call them as\n    they are actual objects.\n\n## A first example: Scatterplot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n-   Note that the variable names are *not* in quote marks. Call them as\n    they are actual objects.\n\n## Adding another aesthetic mapping\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Adding color for continuous data and shape\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, \n                        color = Petal.Length, shape = Species))+\n  geom_point(size = 4)\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n-   We added a `size` argument to the geom_point-function to make the\n    points larger\n\n\n# Exercises 3 Tasks 1\n\n\n## Lines\n\nWe define a simple function\n$$\nf(x) = sin(x) + cos(x)\\cdot2\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfoo <- function(x) sin(x) + cos(x*0.5)\nx <- seq(0, 20, len = 100)\ny <- foo(x)\n```\n:::\n\n\n\n-   We now deliberately ignore the `data` argument in ggplot and just\n    define x and y.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aes = aes(x = x, y = y))+\n  geom_line()\n```\n:::\n\n\n\n## Lines\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mapping = aes(x = x, y = y))+\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## ggplot objects\n\n-   We can assign the ggplot as an object...\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng <- ggplot(mapping = aes(x = x, y = y))\n```\n:::\n\n\n\n-   and look at it:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## ggplot objects\n\n-   adding layers later to an object:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## add multiple layers\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng +\n  geom_point()+\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n## Subplots\n\nMultiple plots can be designed using external packages. Here, we use\n`cowplot`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(cowplot)\n\n# assign two objects\ng_point <- g +\n  geom_point()\n\ng_point_line <- g +\n  geom_point()+\n  geom_line()\n\ng_point_line_color <- g + \n  geom_line(aes(color = y), linewidth=2)+\n  geom_point(color = \"darkorange\")\n\nplot_grid(g, g_point, g_point_line, g_point_line_color,\n          nrow = 2, ncol = 2,\n          labels=\"AUTO\")\n```\n:::\n\n\n\nNote that we have different color arguments:\n\n-   In line 12 *inside* `aes(...)` with a variable name\n\n-   In line 13 *outside* of `aes(...)`\n\n-   Control line width accordingly using `linewidth` (here: outside\n    `aes(...)` )\n\n## Subplots\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n# Exercises 3 Tasks 2\n\n\n\n\n# Other types of plot\n\n## Barplot\n\nThe sytax stays the same for a type of plots. - A barplot only requires\naesthetics for x. - We use the `mtcars` data set as an example\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata <- mtcars\ndata$cyl <- as.factor(data$cyl)\nggplot(data, aes(cyl))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Add color\n\nUse `fill` instead of color here.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata$vs <- as.factor(data$vs)\nggplot(data, aes(cyl, fill = vs))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Add color\n\nSide by side:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata$vs <- as.factor(data$vs)\nggplot(data, aes(cyl, fill = vs))+\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Histogram\n\nHere, we use `iris` again.\n-   `position = \"identity\"` to overplot histograms\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, fill = Species))+\n  geom_histogram(bins = 30, alpha = 0.4, position = \"identity\") # alpha for transparency\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Boxplot\n\n-   Note that we have `Species` on the x-axis *and* as fill color\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n## Violin\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Combination\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+\n  geom_violin(alpha = 0.8)+\n  geom_boxplot(width=0.1, fill=\"grey90\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n## 2-dim density\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Width, y = Sepal.Length))+\n  geom_density2d_filled()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n# Exercises 3 Tasks 3\n\n\n<!-- # Appendix (base graphics) -->\n\n<!-- ## scatter plot -->\n\n<!-- ## lines -->\n\n<!-- ## histogram -->\n\n<!-- ## boxplot -->\n",
    "supporting": [
      "ggplot_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}