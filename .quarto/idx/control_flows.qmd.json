{"title":"Control flows and programming","markdown":{"yaml":{"title":"Control flows and programming","author":"Raphael Rehms","format":{"revealjs":{"scrollable":true,"theme":"solarized","transition":"slide","footer":"Control flows and programming","slide-number":"c","include-after-body":"clean_title_page.html","fontsize":"25pt","highlight-style":"github"}},"execute":{"echo":true,"freeze":"auto"},"editor":{"markdown":{"wrap":72}}},"headingText":"Functions","containsRefs":false,"markdown":"\n\n\n## Functions so far...\n\nSo far, we called functions, to do things for us. E.g.\n\n```{r}\nx <- 1:5\nsin(x)\n\nlog(x, base=2)\n\n\nsum(x)\n```\n\nWe also used functions to create data frames, inspect objects or\nload/save data. E.g.\n\n```{r}\ndata(mtcars, package = \"datasets\")\n\nstr(mtcars)\n```\n\n## Defining own functions\n\nWe can write our own functions, if we need one. In mathematical terms,\nthis is obvious:\n\nConsider a function $f(x) = x^2 + cos(x) + 2$.\n\nWe can automate the evaluation using our own defined function.\n\n```{r}\nour_function <- function(x){\n  y <- x^2 + cos(x*3)*2 + 2\n  return(y)\n}\n```\n\nNote the `return(...)` statement at the end of the function\n\nWe can now use the function to calcualte the result for given values.\n\n```{r}\nx <- seq(-2,2, length.out = 10)\ny <- our_function(x)\ny\n```\n\n## Defining own functions cont'd\n\nWe can generalize this concept to arbitrary inputs (not only numerical). Here are two examples:\n\n```{r}\n# Combine three arguments and returns a list with all combinations concatenated\nfunction1 <- function(x, y, z){\n  element1 <- c(x,y)\n  element2 <- c(x,z)\n  element3 <- c(y, z)\n  element4 <- c(x, y, z)\n  \n  return(list(element1, element2, element3, element4))\n}\n\nfunction1(1,2,3)\nfunction1(\"a\", \"b\", \"c\")\n\n\n# A function, that sum up the columns and rows of a matrix with additional info\nfunction2 <- function(m){\n  print(\"Dimension of input matrix:\")\n  print(dim(m))\n  \n  rs <- rowSums(m)\n  cs <- colSums(m)\n  s <- sum(m)\n  \n  return(list(RowSums = rs, ColSums = cs, FullSum = s))\n}\n\nm1 <- matrix(1:9, 3,3)\nm2 <- matrix(-100:100, 100,2)\n\nfunction2(m1)\nfunction2(m2)\n```\n\n# Conditions\n\n## If-else statement\n\nConsider a function that should do something. However, it depends on the\ninput type.\n\n```{r}\n# function should sum up the values. If it is of type character, it should just paste everythign together\ntyped_sum <- function(x){\n  if (class(x) == \"character\") {\n    ret <- paste(x, collapse = \" \")\n  } else {\n    ret <- sum(x)\n  }\n  return(ret)\n}\n  \ntyped_sum(1:5)\ntyped_sum(c(\"This\", \"will\", \"be\", \"one\", \"sentence\"))\n\n```\n\n-   The `else {...}` is optional.\n-   If more conditions are required, one can use `else if {...}`\n\n# Loops\n\n## For loops\n\nSo far, we can automate code now using functions. But we can automate\neven more using a loop!\n\nAn short example:\n\n```{r}\nx <- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in x) {\n  print(i)  # print each element of a vector on after another\n}\n```\n\nA more complex example:\n\nLet's calculate the\n[Fibonacci](https://www.mathsisfun.com/numbers/fibonacci-sequence.html)\nsequence until 10.\n\n```{r}\na <- rep(0, 10) # this is a container where we will store the solution\na[2] <- 1\n\n# here we need a for loop because we must access the two arguments calculated in the steps before\nfor (i in 3:10) {\n  a[i] <- a[i-2] + a[i-1]\n}\na\n```\n\n## while loops\n\nWe can also repeat operations until a defined condition is met.\n\nIn this example, we sum the elements in a vector until they exceed 100.\nWe also print the number of used elements.\n\n```{r}\nx <- c(11, 20, 1, 44, 99, 2000, 100)\n\ndynamic_sum <- 0\ni <- 1\nwhile (dynamic_sum < 100) {\n  i <- i + 1\n  dynamic_sum <- sum(x[1:i])\n}\nprint(paste(\"Used elements of the vector:\", i))\nprint(paste(\"Sum is:\", dynamic_sum))\n```\n\n[**Note that you can use loops in functions as\nwell**]{style=\"color:blue;\"}\n\n# apply-family\n\n## lapply\n\n-   Consider an operation, that you want to apply to each element of a\n    list. You have 3 options: Write code for each list element\n\n-   Iterate over all list elements and call a function to with each element , i.e. in each iteration\n\n-   Apply the function to each element directly\n\n![](map.png)\n\n## lapply examples\n\nEasy example:\n\n```{r}\nl <- list(1:5, 1:100, 1:1000)\nlapply(l, sum)  # calculate the sum of each element\n```\n\nData frames are just lists! So we can use this fact here. We may\ncalculate the maximum value of each column.\n\n```{r}\nstr(iris) # iris data set has a factor. max() is not meaningful on factors.\nlapply(iris[, 1:4], max)\n```\n\n## sapply\n\n`sapply` is basically the same as lapply, but tries to simplify the\nresult. In our last example, this makes sense: Each element is just a\nnumber.\n\n```{r}\nsapply(iris[, 1:4], max)\n```\n\n## apply\n\nThere is a basic `apply` function. It is intended to apply a function on\nan *array*. We have to specify the *margin*. This defines, on which\naxis, the function should be applied.\n\n```{r}\n(m <- matrix(1:6, 3, 2))\napply(m, MARGIN = 1, FUN = sum)  # rowsums\napply(m, MARGIN = 2, FUN = sum)   # colsums\napply(m, MARGIN = 1:2, FUN = sum)  # sum on each element\n```\n\n::: callout-warning\nApply on data frames will cast a data frame into a matrix with\n(as.matrix/array!)\n:::\n\n## Other apply functions\n\nThere are a lot of other apply functions. To name some of them:\n\n-   `mapply` (apply a function to multiple vectors/lists)\n\n-   `tapply` (apply over ragged vectors)\n\n-   `pbapply` (adds a progress bar, package: `pbapply`)\n\n-   `mclapply` (parallel version of lapply, package: `parallel`)\n","srcMarkdownNoYaml":"\n\n# Functions\n\n## Functions so far...\n\nSo far, we called functions, to do things for us. E.g.\n\n```{r}\nx <- 1:5\nsin(x)\n\nlog(x, base=2)\n\n\nsum(x)\n```\n\nWe also used functions to create data frames, inspect objects or\nload/save data. E.g.\n\n```{r}\ndata(mtcars, package = \"datasets\")\n\nstr(mtcars)\n```\n\n## Defining own functions\n\nWe can write our own functions, if we need one. In mathematical terms,\nthis is obvious:\n\nConsider a function $f(x) = x^2 + cos(x) + 2$.\n\nWe can automate the evaluation using our own defined function.\n\n```{r}\nour_function <- function(x){\n  y <- x^2 + cos(x*3)*2 + 2\n  return(y)\n}\n```\n\nNote the `return(...)` statement at the end of the function\n\nWe can now use the function to calcualte the result for given values.\n\n```{r}\nx <- seq(-2,2, length.out = 10)\ny <- our_function(x)\ny\n```\n\n## Defining own functions cont'd\n\nWe can generalize this concept to arbitrary inputs (not only numerical). Here are two examples:\n\n```{r}\n# Combine three arguments and returns a list with all combinations concatenated\nfunction1 <- function(x, y, z){\n  element1 <- c(x,y)\n  element2 <- c(x,z)\n  element3 <- c(y, z)\n  element4 <- c(x, y, z)\n  \n  return(list(element1, element2, element3, element4))\n}\n\nfunction1(1,2,3)\nfunction1(\"a\", \"b\", \"c\")\n\n\n# A function, that sum up the columns and rows of a matrix with additional info\nfunction2 <- function(m){\n  print(\"Dimension of input matrix:\")\n  print(dim(m))\n  \n  rs <- rowSums(m)\n  cs <- colSums(m)\n  s <- sum(m)\n  \n  return(list(RowSums = rs, ColSums = cs, FullSum = s))\n}\n\nm1 <- matrix(1:9, 3,3)\nm2 <- matrix(-100:100, 100,2)\n\nfunction2(m1)\nfunction2(m2)\n```\n\n# Conditions\n\n## If-else statement\n\nConsider a function that should do something. However, it depends on the\ninput type.\n\n```{r}\n# function should sum up the values. If it is of type character, it should just paste everythign together\ntyped_sum <- function(x){\n  if (class(x) == \"character\") {\n    ret <- paste(x, collapse = \" \")\n  } else {\n    ret <- sum(x)\n  }\n  return(ret)\n}\n  \ntyped_sum(1:5)\ntyped_sum(c(\"This\", \"will\", \"be\", \"one\", \"sentence\"))\n\n```\n\n-   The `else {...}` is optional.\n-   If more conditions are required, one can use `else if {...}`\n\n# Loops\n\n## For loops\n\nSo far, we can automate code now using functions. But we can automate\neven more using a loop!\n\nAn short example:\n\n```{r}\nx <- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in x) {\n  print(i)  # print each element of a vector on after another\n}\n```\n\nA more complex example:\n\nLet's calculate the\n[Fibonacci](https://www.mathsisfun.com/numbers/fibonacci-sequence.html)\nsequence until 10.\n\n```{r}\na <- rep(0, 10) # this is a container where we will store the solution\na[2] <- 1\n\n# here we need a for loop because we must access the two arguments calculated in the steps before\nfor (i in 3:10) {\n  a[i] <- a[i-2] + a[i-1]\n}\na\n```\n\n## while loops\n\nWe can also repeat operations until a defined condition is met.\n\nIn this example, we sum the elements in a vector until they exceed 100.\nWe also print the number of used elements.\n\n```{r}\nx <- c(11, 20, 1, 44, 99, 2000, 100)\n\ndynamic_sum <- 0\ni <- 1\nwhile (dynamic_sum < 100) {\n  i <- i + 1\n  dynamic_sum <- sum(x[1:i])\n}\nprint(paste(\"Used elements of the vector:\", i))\nprint(paste(\"Sum is:\", dynamic_sum))\n```\n\n[**Note that you can use loops in functions as\nwell**]{style=\"color:blue;\"}\n\n# apply-family\n\n## lapply\n\n-   Consider an operation, that you want to apply to each element of a\n    list. You have 3 options: Write code for each list element\n\n-   Iterate over all list elements and call a function to with each element , i.e. in each iteration\n\n-   Apply the function to each element directly\n\n![](map.png)\n\n## lapply examples\n\nEasy example:\n\n```{r}\nl <- list(1:5, 1:100, 1:1000)\nlapply(l, sum)  # calculate the sum of each element\n```\n\nData frames are just lists! So we can use this fact here. We may\ncalculate the maximum value of each column.\n\n```{r}\nstr(iris) # iris data set has a factor. max() is not meaningful on factors.\nlapply(iris[, 1:4], max)\n```\n\n## sapply\n\n`sapply` is basically the same as lapply, but tries to simplify the\nresult. In our last example, this makes sense: Each element is just a\nnumber.\n\n```{r}\nsapply(iris[, 1:4], max)\n```\n\n## apply\n\nThere is a basic `apply` function. It is intended to apply a function on\nan *array*. We have to specify the *margin*. This defines, on which\naxis, the function should be applied.\n\n```{r}\n(m <- matrix(1:6, 3, 2))\napply(m, MARGIN = 1, FUN = sum)  # rowsums\napply(m, MARGIN = 2, FUN = sum)   # colsums\napply(m, MARGIN = 1:2, FUN = sum)  # sum on each element\n```\n\n::: callout-warning\nApply on data frames will cast a data frame into a matrix with\n(as.matrix/array!)\n:::\n\n## Other apply functions\n\nThere are a lot of other apply functions. To name some of them:\n\n-   `mapply` (apply a function to multiple vectors/lists)\n\n-   `tapply` (apply over ragged vectors)\n\n-   `pbapply` (adds a progress bar, package: `pbapply`)\n\n-   `mclapply` (parallel version of lapply, package: `parallel`)\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","include-after-body":["clean_title_page.html"],"highlight-style":"github","output-file":"control_flows.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.55","auto-stretch":true,"title":"Control flows and programming","author":"Raphael Rehms","editor":{"markdown":{"wrap":72}},"scrollable":true,"theme":"solarized","transition":"slide","footer":"Control flows and programming","slideNumber":"c","fontsize":"25pt"}}},"projectFormats":["html"]}