{"title":"Intro intro R","markdown":{"yaml":{"title":"Intro intro R","author":"Raphael Rehms","format":{"revealjs":{"scrollable":true,"theme":"solarized","transition":"slide","footer":"Intro intro R","slide-number":"c","include-after-body":"clean_title_page.html","fontsize":"25pt","highlight-style":"github"}},"execute":{"echo":true,"freeze":"auto"},"editor":{"markdown":{"wrap":72}}},"headingText":"Orga","containsRefs":false,"markdown":"\n\n\n## Parts\n\nCombination of\n\n-   Slides\n\n    -   \"lecture like\"\n\n    -   New content, Theoretical part\n\n-   Exercises\n\n    -   Hands-on\n\n    -   Dedicated time during the course\n\n    -   \"Interactive\"\n\n<!-- ## Passing this course? -->\n<!---->\n<!-- -   Passing this course is mandatory for the QM exam -->\n<!---->\n<!-- -   Hand in the **data project** ([**Deadline 22. December -->\n<!--     2024**]{style=\"color:red;\"}) -->\n<!---->\n<!--     -   In the data project you proof, that you are able to conduct a -->\n<!--         statistical analysis in `R` -->\n<!---->\n<!--     -   Should have the form of a *report using **Quarto** or -->\n<!--         **Markdown*** -->\n\n# Intro\n\n## Why R?\n\nWhy R?\n\n-   R is **open source**\n\n-   All techniques for data analyses\n\n-   State-of-the-art graphics capabilities\n\n-   A platform for programming new statistical methods or analysis\n    pipelines (in form of R-packages)\n\n## Programming (in general)\n\n*\"Good programmers are made, not born.\"* (Gerald M. Weinberg - The\nPsychology of Computer Programming)\n\n-   consequence I\n\n    train...\n\n-   consequence II\n\n    train...\n\n-   consequence III\n\n    train more\n\nHands-on is important. Understanding is less that 30%\n\n## R and R Studio\n\nRequired tools for the course:\n\n-   Programming language R\n\n    -   designed to make fast prototyping for statistical analysis\n    -   interpreted language\n\n-   RStudio (optional, but recommended)\n\n    -   IDE tailored for `R`\n\n    -   Integrates a lot more (e.g. python, c++, etc.)\n\n## R packages\n\n-   `R` comes with many useful packages by default\n\n-   However, the strength lies in the huge collection of external\n    packages\n\n-   Most popular and default: [**CRAN**](https://cran.r-project.org/)\n\n-   Install new packages in R using either\n\n    -   using a command:\n\n        -   `install.packages(\"<package-name>\")`\n            (e.g.`install.packages(\"mvtnorm\")`)\n\n    -   RStudio\n\n        -   using built-in tools from the IDE\n\n# Basic operations\n\n## Addition, subtraction, etc\n\n```{r}\n1+2\n1-2\n1*2\n1/2\n1^2\n```\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\n1/0\n```\n:::\n\n\n\n\n## Special symbols functions\n\nSpecial symbols\n\n```{r, eval=FALSE}\npi\nInf\n```\n\nMathematical functions\n\n```{r}\nexp(1)\nlog(1)\n```\n\nSpecial cases:\n\n\n-   `NaN` is a data type that indicates an invalid number.\n```{r}\nlog(-1)\nNaN + 1\n```\n\n-   `NA` is a missing value.\n```{r}\nNA + 1\n```\n\n\n-   `NULL` means literally empty/nothing\n\n\n## Assigning objects\n\nAssignment is done using `<-`\n\n```{r}\nx <- 1\ny <- 2\nx + y\n```\n\nAlternatively, use `=`\n\n```{r}\nx = sqrt(2)\ny = sqrt(2)\nx * y\n```\n\n[Look at environment pane in R Studio, what can you\nsee?]{style=\"color:blue;\"}\n\n## Naming objects\n\n-   Objects in `R` have to start with a letter\n\nCase sensitive\n\n```{r}\na <- 2\nA <- 1\na-a\n```\n\nOverwrite variables with old ones\n\n```{r}\na <- a + 1\n```\n\nCombination of words\n\n```{r}\nvariable_name <- 1\nvariable.name <- 1\nvariableName <- 1\n```\n\n## Comments\n\nSometimes it is useful, to comment code. Use a `#` to comment\n\nStandard:\n\n```{r}\n1+1\n```\n\nComment a line (no output):\n\n```{r}\n# 1+1\n```\n\nComment after an expression (only `1+1` gets evaluated):\n\n```{r}\n1+1 # +1\n```\n\n## Function calling\n\nSo far we used expressions like `f(...)`. This is a **function**. E.g.\n\n```{r, eval=FALSE}\nexp(2)\n```\n\nWe call the function `exp` with a value of 2. Or the (natural)\nlogarithm:\n\n```{r}\nlog(exp(1))\n```\n\nWe can specify the base as a *second argument*:\n\n```{r}\nlog(2, 2)\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nLog(Exp(1))\n```\n:::\n\n\n\n\n\n## Get documentation\n\nAccess the documentation using\n\n-   `<F1>`\n\n-   type `?function_name`\n\n-   use RStudio functionality\n\nE.g. documentation for `log()` reveals that we calculate the natural\nlogarithm.\n\n```{r, echo=T, eval=FALSE}\n?log\nlog(x, base = exp(1))\n```\n\n## Function calling cont'd\n\nYou can ignore the argument name, when placements are clear. - We have\ndone that for `exp` and `log`\n\nHence, this here\n\n```{r, eval=FALSE}\nlog(2, 2)\n```\n\nmeans, that we actually call\n\n```{r, eval=FALSE}\nlog(x=2, base=2)\n```\n\nIf you specify the argument, order does not matter.\n\nExample:\n\n```{r, eval=FALSE}\nlog(base=3, x=2)\nlog(3, 2)\n```\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nlog <- 1\nlog(log)\n```\n:::\n\n\n\n\n## Basic (primitive) data types\n\n#### `numeric`\n\nA (floating point) number. We used this so far (default).\n\n`1.0, 1.34, -33, pi`\n\n<hr>\n\n#### `logical`\n\nA binary data type.\n\n`TRUE, FALSE, T, F`\n\n<hr>\n\n#### `integer`\n\nCan be specified using an \"L\".\n\n`1L, 100L, -99L`\n\n<hr>\n\n#### `character`\n\nRepresents letters OR sentences.\n\n`'a', \"abc\", \"May the force be with you\"`\n\n\n\n\n# Exercise 1\n\n\n\n# Vectors\n\n\n\n## Vectors\n\nYou can *combine* single values to a *vector.*\n\n```{r}\na <- c(1,2,3,4)\na\n\nb <- c(TRUE, FALSE, TRUE)\nb\n\nc <- c(\"a\", 'ab', \"ab c\")\nc\n\n\n```\n\nMany operations in R are *vectorized*\n\n```{r}\na + a\na * a\nexp(a)\n-a\n```\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nc(\"1\",2,3)\n```\n:::\n\n\n\n\n## Automatic recycling\n\n```{r}\na <- c(1,2,3,4)\na + 1\n\nb <- c(2,2)\na + b\n```\n\n::: callout-warning\nNote the behavior for for vectors with different length! Example:\n\n```{r, warning=TRUE}\na <- c(1,2,3)\nb <- c(1,2)\na + b\n```\n:::\n\n\n\n\n\n## Vector creation\n\nThere are a lot of convenience functions to create vectors.\n\n```{r}\nc(1,2,3,4)\n1:4\nseq(4)\n```\n\nMore complex ones:\n\n```{r}\n4:-3\nseq(-10, 10, by = 2)\nseq(-10, 10, length.out = 10) # vector of length 10\n```\n\n\n\n\n\n## Select elements of a vector\n\n**Access elements of a vector using positional numbers within `[...]`:**\n```{r}\nx <- c(2,4,2,5)\nx[1]\n```\n\nMultiple elements\n```{r}\nselection <- c(1,4)\nx[selection]\nx[c(1,4)]\n```\n\nNegative values will be excluded\n```{r}\nx[-c(1,3)]\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nx[1:5]\nx[-(5:10)]\nx[0]\n```\n:::\n\n\n\n## Logical values for comparison\n\nRecall the very most basic data type `logical`, i.e. `TRUE` and `FALSE`.\n\n-   We can create such an object by comparison:\n```{r}\n1 == 2  # lhs equal rhs?\n1 != 2  # lhs unequal rhs?\n1 > 2  # lhs larger rhs?\n1 >= 2  # lhs larger or equal rhs?\n1 < 2  # lhs less than rhs?\n1 <= 2  # lhs less or equal than rhs?\n```\n\nSwap value:\n```{r}\n!TRUE\n!FALSE\n```\n\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\n1 == \"1\"\n1 != NaN \nNA == NA  # we will learn the solution in a few slides\n```\n:::\n\n\n\n\n## Filter elements of a vector\n\nComparison operators are vectorized:\n```{r}\nc(T,F,T) == c(F,F,T)  # element-wise comparison\n```\n\n\nCheck condition on a numeric vector\n```{r}\nx <- c(2,4,2,5)\nposition_two <- x == 2  # logical vector showing, where the condition holds\nposition_two\n```\n\n\n**Use logical values to filter a vector.**\n```{r}\nx[position_two]\n# or dictly\nx[x == 2]\n```\n\nFilter for values less than 3\n```{r}\nx[x < 3]\n```\n\n\n## Combine filters with `&` and `|`\n\nCombination operations...\n```{r}\nTRUE & TRUE\nFALSE & TRUE\nTRUE | TRUE\nFALSE | TRUE\n```\n\n...or vectorized\n```{r}\nx <- c(T,F,T,F)\ny <- c(T,T,F,F)\nx & y\nx | y\n```\n\nUse this to filter a vector for multiple conditions\n```{r}\nx[(x < 5) & (x > 2)]\n```\n\n\n\n## Assign new values in a vector\n\nWe can assign new values to a vector using a combination of selection and assignment\n```{r}\nx <- 1:5\nx[1] <- 2\nx\n\nx[x > 3] <- -99\nx\n\nx[-1] <- 100\nx\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nx[100] <- 1\n```\n:::\n\n\n\n\n\n## Vector operations\n```{r}\nx <- c(1,1,2,3)\nlength(x)\nappend(x, c(1,2,3))\nrev(x)\nsort(x)\nunique(x)\nsum(x) \n```\n\n\n\n\n# Exercise 2\n\n\n\n\n\n\n\n# Complex structures\n\n\n## Factors\nConsider a vector, that represents a categorical variable. Let's say colors.\n```{r}\ncolors <- c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\")\ncolors\n```\n\nWe cast `colors` into a factor now:\n```{r}\ncolors <- as.factor(colors)\ncolors\n\nlevels(colors)\nas.numeric(colors)\nclass(colors)\ntypeof(colors)\n```\n\nHence, a vector of integeres where each value corresponds to a character value.\n\n\n\n\n## Complex data structures \n\n![from *Ceballos and Cardiel, (2013). Data structure â€“ First Steps in R. Retreived 25-11-2018\nfrom http:// venus.ifca.unican.es/ Rintro.2024*](dataStructuresNew.png)\n\n<br>\n\n\n**Use `str(...)` to inspect the structure of complex data types!**\n\n\n\n## Vector, Matrix, Array\n\nWe already got vectors. Lets combine them:\n```{r}\nx <- 1:4\n(x_rbind <- cbind(x,x)) # 4 rows, 2 columns\n(x_cbind <- rbind(x,x)) # 2 rows, 4 columns\n\ndim(x_rbind)\ndim(x_cbind)\n\nnrow(x_rbind)\nncol(x_rbind)\n```\n\n\n## Vector, Matrix, Array cont'd\n\nWe can define a matrix using the `matrix` function:\n```{r}\nmatrix(1:6, nrow = 3, ncol = 2)\nmatrix(1:6, nrow = 3, ncol = 2, byrow = T)\n```\n\n**Arrays as a generalization with multiple dimensions**\n```{r}\narray(1:12, dim = c(3,2,2))\n```\n\nThis is also sometimes called a *tensor*.\n\n\n\n\n## Select/filter elements on Arrays\n\nAs vectors, we can select and filter. Seperate dimensions with a `,`, i.e. `[... , ...]` \n\n```{r}\n(m <- matrix(1:6, nrow = 3, ncol = 2))\n\nm[2,2]\nm[nrow(m), ncol(m) ]\n```\n\nDefining no entry will return the full dimension:\n```{r}\nm[2,]\nm[,1]\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nm[1,,2]\nm[10]\n```\n:::\n\n\n\n\n\n\n## List\n\nA list is a collection of elements. These elements could be any object.\n```{r}\n(l <- list(1, \"2\", 1:3, list(m)))\n\n```\n\nAccess elements of a list with `[[...]]`.\n```{r}\nl[[2]]\n```\n\nA sub-list can be accessed with  `[...]`.\n```{r}\nl[1:3]\n```\n\n\n\n## List cont'd\nYou can define names for lists:\n```{r}\nl <- list(slot1 = 1:3, slot2 = c(\"a\", \"b\"), slot3 = l)\nnames(l)\n```\n\nAccess list elements using the name and a `$`:\n\n```{r}\nl$slot3 # return the original list l before overwriting it\n```\n\nDelete elements by assigning a `NULL` to a slot\n```{r}\nl[2:3] <- NULL\nl\n```\n\n\n\n## Data Frame\n\nA data frame is basically a list, where each element is a vector of the same length.\nHowever, it implements function to handle it as a matrix.\n\nLet's define a data set representing cars:\n```{r}\ncol <- as.factor(c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\"))\npri <- c(10, 20, 9, 50, 0.4, 15, 160, 60) * 1000\nis_el <- c(F,F,F,T,F,T,F,T)\n\ncar_ds <- data.frame(color = col, price = pri, is_electric = is_el)\ncar_ds\n\nstr(car_ds)\n```\n\n\n\n## Data Frame cont'd\n\nWe can work on a data set as we work with a matrix\n```{r}\n# All rows with red cars\ncar_ds[car_ds$color == \"red\", ]\n\n# price of all black cars\ncar_ds[car_ds$color == \"black\", \"price\"]\n\n# set a new price for the last car in the ds\ncar_ds[8, 2] <- 600\ncar_ds\n```\n\n\n\n\n## More on data structures\n\n-   A data frame behaves like a matrix.\n-   However, keep in mind that it is actually a list.\nWe can easily prove that:\n```{r}\nis.list(car_ds)\n```\n\nUse `str(...)` to check the data structure of *any* object:\n```{r}\nstr(car_ds)\nm <- matrix(1:4, ncol = 2)\nstr(m)\n```\n\n\n\n\n## Load data\n\nWe can load a data set from a package using `data(...)`.\n```{r}\ndata(\"iris\", package = \"datasets\")  # look in the environment variables\n```\n\nWe can load data from files. Use `read.table(...)`, or wrapper functions with reasonable default values. E.g. We can read a file directly from the web:\n```{r}\nd <- read.csv(\"https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/mtcars.csv\")\nhead(d)  # show the first few lines of a data set\n```\n\nNote, that we can also use this to read a data set from a local directory! To do that we have to specify either the full path or define the path from the **working directory**. Use `getwd(...)` and `setwd(...)` to get or set the current working directory. See next slide for an example.\n\n\n##  Save data sets\nConsider a data set, you have worked with. You can save it using write functions.\n```{r}\nwrite.csv(car_ds, file = \"example_data.csv\")  # we save our data set in the current working directory\n```\n\nWe can again read the data as a new object:\n```{r}\nd_loaded <- read.csv(\"example_data.csv\")\n\nall.equal(car_ds,d_loaded)  # test whether 2 (more complex) R object are the same\n```\n\n\n[**We can read other files as well. E.g. excel, SPSS, SAS, etc.**]{style=\"color:blue;\"}\n\nThere are a lot of packages to do that. \n\n[I use the function `load(...)` from the `rio` package that tries to unify a lot of different formats.]{style=\"color:rgba(255, 99, 71, 0.5);\"})\n\n\n\n## Save and load R objects\n\nSo far, we only worked with data frames for read and write operations. \nWe can save general `R` objects using `save(...)` and `load(...)` using the `.RData` format.\n```{r}\na_list <- list(a = 42, data = iris, comment = \"whatever\")\n\nsave(a_list, file = \"example_object.RData\")\n\nload(\"example_object.RData\")\n```\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n# Orga\n\n## Parts\n\nCombination of\n\n-   Slides\n\n    -   \"lecture like\"\n\n    -   New content, Theoretical part\n\n-   Exercises\n\n    -   Hands-on\n\n    -   Dedicated time during the course\n\n    -   \"Interactive\"\n\n<!-- ## Passing this course? -->\n<!---->\n<!-- -   Passing this course is mandatory for the QM exam -->\n<!---->\n<!-- -   Hand in the **data project** ([**Deadline 22. December -->\n<!--     2024**]{style=\"color:red;\"}) -->\n<!---->\n<!--     -   In the data project you proof, that you are able to conduct a -->\n<!--         statistical analysis in `R` -->\n<!---->\n<!--     -   Should have the form of a *report using **Quarto** or -->\n<!--         **Markdown*** -->\n\n# Intro\n\n## Why R?\n\nWhy R?\n\n-   R is **open source**\n\n-   All techniques for data analyses\n\n-   State-of-the-art graphics capabilities\n\n-   A platform for programming new statistical methods or analysis\n    pipelines (in form of R-packages)\n\n## Programming (in general)\n\n*\"Good programmers are made, not born.\"* (Gerald M. Weinberg - The\nPsychology of Computer Programming)\n\n-   consequence I\n\n    train...\n\n-   consequence II\n\n    train...\n\n-   consequence III\n\n    train more\n\nHands-on is important. Understanding is less that 30%\n\n## R and R Studio\n\nRequired tools for the course:\n\n-   Programming language R\n\n    -   designed to make fast prototyping for statistical analysis\n    -   interpreted language\n\n-   RStudio (optional, but recommended)\n\n    -   IDE tailored for `R`\n\n    -   Integrates a lot more (e.g. python, c++, etc.)\n\n## R packages\n\n-   `R` comes with many useful packages by default\n\n-   However, the strength lies in the huge collection of external\n    packages\n\n-   Most popular and default: [**CRAN**](https://cran.r-project.org/)\n\n-   Install new packages in R using either\n\n    -   using a command:\n\n        -   `install.packages(\"<package-name>\")`\n            (e.g.`install.packages(\"mvtnorm\")`)\n\n    -   RStudio\n\n        -   using built-in tools from the IDE\n\n# Basic operations\n\n## Addition, subtraction, etc\n\n```{r}\n1+2\n1-2\n1*2\n1/2\n1^2\n```\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\n1/0\n```\n:::\n\n\n\n\n## Special symbols functions\n\nSpecial symbols\n\n```{r, eval=FALSE}\npi\nInf\n```\n\nMathematical functions\n\n```{r}\nexp(1)\nlog(1)\n```\n\nSpecial cases:\n\n\n-   `NaN` is a data type that indicates an invalid number.\n```{r}\nlog(-1)\nNaN + 1\n```\n\n-   `NA` is a missing value.\n```{r}\nNA + 1\n```\n\n\n-   `NULL` means literally empty/nothing\n\n\n## Assigning objects\n\nAssignment is done using `<-`\n\n```{r}\nx <- 1\ny <- 2\nx + y\n```\n\nAlternatively, use `=`\n\n```{r}\nx = sqrt(2)\ny = sqrt(2)\nx * y\n```\n\n[Look at environment pane in R Studio, what can you\nsee?]{style=\"color:blue;\"}\n\n## Naming objects\n\n-   Objects in `R` have to start with a letter\n\nCase sensitive\n\n```{r}\na <- 2\nA <- 1\na-a\n```\n\nOverwrite variables with old ones\n\n```{r}\na <- a + 1\n```\n\nCombination of words\n\n```{r}\nvariable_name <- 1\nvariable.name <- 1\nvariableName <- 1\n```\n\n## Comments\n\nSometimes it is useful, to comment code. Use a `#` to comment\n\nStandard:\n\n```{r}\n1+1\n```\n\nComment a line (no output):\n\n```{r}\n# 1+1\n```\n\nComment after an expression (only `1+1` gets evaluated):\n\n```{r}\n1+1 # +1\n```\n\n## Function calling\n\nSo far we used expressions like `f(...)`. This is a **function**. E.g.\n\n```{r, eval=FALSE}\nexp(2)\n```\n\nWe call the function `exp` with a value of 2. Or the (natural)\nlogarithm:\n\n```{r}\nlog(exp(1))\n```\n\nWe can specify the base as a *second argument*:\n\n```{r}\nlog(2, 2)\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nLog(Exp(1))\n```\n:::\n\n\n\n\n\n## Get documentation\n\nAccess the documentation using\n\n-   `<F1>`\n\n-   type `?function_name`\n\n-   use RStudio functionality\n\nE.g. documentation for `log()` reveals that we calculate the natural\nlogarithm.\n\n```{r, echo=T, eval=FALSE}\n?log\nlog(x, base = exp(1))\n```\n\n## Function calling cont'd\n\nYou can ignore the argument name, when placements are clear. - We have\ndone that for `exp` and `log`\n\nHence, this here\n\n```{r, eval=FALSE}\nlog(2, 2)\n```\n\nmeans, that we actually call\n\n```{r, eval=FALSE}\nlog(x=2, base=2)\n```\n\nIf you specify the argument, order does not matter.\n\nExample:\n\n```{r, eval=FALSE}\nlog(base=3, x=2)\nlog(3, 2)\n```\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nlog <- 1\nlog(log)\n```\n:::\n\n\n\n\n## Basic (primitive) data types\n\n#### `numeric`\n\nA (floating point) number. We used this so far (default).\n\n`1.0, 1.34, -33, pi`\n\n<hr>\n\n#### `logical`\n\nA binary data type.\n\n`TRUE, FALSE, T, F`\n\n<hr>\n\n#### `integer`\n\nCan be specified using an \"L\".\n\n`1L, 100L, -99L`\n\n<hr>\n\n#### `character`\n\nRepresents letters OR sentences.\n\n`'a', \"abc\", \"May the force be with you\"`\n\n\n\n\n# Exercise 1\n\n\n\n# Vectors\n\n\n\n## Vectors\n\nYou can *combine* single values to a *vector.*\n\n```{r}\na <- c(1,2,3,4)\na\n\nb <- c(TRUE, FALSE, TRUE)\nb\n\nc <- c(\"a\", 'ab', \"ab c\")\nc\n\n\n```\n\nMany operations in R are *vectorized*\n\n```{r}\na + a\na * a\nexp(a)\n-a\n```\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nc(\"1\",2,3)\n```\n:::\n\n\n\n\n## Automatic recycling\n\n```{r}\na <- c(1,2,3,4)\na + 1\n\nb <- c(2,2)\na + b\n```\n\n::: callout-warning\nNote the behavior for for vectors with different length! Example:\n\n```{r, warning=TRUE}\na <- c(1,2,3)\nb <- c(1,2)\na + b\n```\n:::\n\n\n\n\n\n## Vector creation\n\nThere are a lot of convenience functions to create vectors.\n\n```{r}\nc(1,2,3,4)\n1:4\nseq(4)\n```\n\nMore complex ones:\n\n```{r}\n4:-3\nseq(-10, 10, by = 2)\nseq(-10, 10, length.out = 10) # vector of length 10\n```\n\n\n\n\n\n## Select elements of a vector\n\n**Access elements of a vector using positional numbers within `[...]`:**\n```{r}\nx <- c(2,4,2,5)\nx[1]\n```\n\nMultiple elements\n```{r}\nselection <- c(1,4)\nx[selection]\nx[c(1,4)]\n```\n\nNegative values will be excluded\n```{r}\nx[-c(1,3)]\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nx[1:5]\nx[-(5:10)]\nx[0]\n```\n:::\n\n\n\n## Logical values for comparison\n\nRecall the very most basic data type `logical`, i.e. `TRUE` and `FALSE`.\n\n-   We can create such an object by comparison:\n```{r}\n1 == 2  # lhs equal rhs?\n1 != 2  # lhs unequal rhs?\n1 > 2  # lhs larger rhs?\n1 >= 2  # lhs larger or equal rhs?\n1 < 2  # lhs less than rhs?\n1 <= 2  # lhs less or equal than rhs?\n```\n\nSwap value:\n```{r}\n!TRUE\n!FALSE\n```\n\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\n1 == \"1\"\n1 != NaN \nNA == NA  # we will learn the solution in a few slides\n```\n:::\n\n\n\n\n## Filter elements of a vector\n\nComparison operators are vectorized:\n```{r}\nc(T,F,T) == c(F,F,T)  # element-wise comparison\n```\n\n\nCheck condition on a numeric vector\n```{r}\nx <- c(2,4,2,5)\nposition_two <- x == 2  # logical vector showing, where the condition holds\nposition_two\n```\n\n\n**Use logical values to filter a vector.**\n```{r}\nx[position_two]\n# or dictly\nx[x == 2]\n```\n\nFilter for values less than 3\n```{r}\nx[x < 3]\n```\n\n\n## Combine filters with `&` and `|`\n\nCombination operations...\n```{r}\nTRUE & TRUE\nFALSE & TRUE\nTRUE | TRUE\nFALSE | TRUE\n```\n\n...or vectorized\n```{r}\nx <- c(T,F,T,F)\ny <- c(T,T,F,F)\nx & y\nx | y\n```\n\nUse this to filter a vector for multiple conditions\n```{r}\nx[(x < 5) & (x > 2)]\n```\n\n\n\n## Assign new values in a vector\n\nWe can assign new values to a vector using a combination of selection and assignment\n```{r}\nx <- 1:5\nx[1] <- 2\nx\n\nx[x > 3] <- -99\nx\n\nx[-1] <- 100\nx\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nx[100] <- 1\n```\n:::\n\n\n\n\n\n## Vector operations\n```{r}\nx <- c(1,1,2,3)\nlength(x)\nappend(x, c(1,2,3))\nrev(x)\nsort(x)\nunique(x)\nsum(x) \n```\n\n\n\n\n# Exercise 2\n\n\n\n\n\n\n\n# Complex structures\n\n\n## Factors\nConsider a vector, that represents a categorical variable. Let's say colors.\n```{r}\ncolors <- c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\")\ncolors\n```\n\nWe cast `colors` into a factor now:\n```{r}\ncolors <- as.factor(colors)\ncolors\n\nlevels(colors)\nas.numeric(colors)\nclass(colors)\ntypeof(colors)\n```\n\nHence, a vector of integeres where each value corresponds to a character value.\n\n\n\n\n## Complex data structures \n\n![from *Ceballos and Cardiel, (2013). Data structure â€“ First Steps in R. Retreived 25-11-2018\nfrom http:// venus.ifca.unican.es/ Rintro.2024*](dataStructuresNew.png)\n\n<br>\n\n\n**Use `str(...)` to inspect the structure of complex data types!**\n\n\n\n## Vector, Matrix, Array\n\nWe already got vectors. Lets combine them:\n```{r}\nx <- 1:4\n(x_rbind <- cbind(x,x)) # 4 rows, 2 columns\n(x_cbind <- rbind(x,x)) # 2 rows, 4 columns\n\ndim(x_rbind)\ndim(x_cbind)\n\nnrow(x_rbind)\nncol(x_rbind)\n```\n\n\n## Vector, Matrix, Array cont'd\n\nWe can define a matrix using the `matrix` function:\n```{r}\nmatrix(1:6, nrow = 3, ncol = 2)\nmatrix(1:6, nrow = 3, ncol = 2, byrow = T)\n```\n\n**Arrays as a generalization with multiple dimensions**\n```{r}\narray(1:12, dim = c(3,2,2))\n```\n\nThis is also sometimes called a *tensor*.\n\n\n\n\n## Select/filter elements on Arrays\n\nAs vectors, we can select and filter. Seperate dimensions with a `,`, i.e. `[... , ...]` \n\n```{r}\n(m <- matrix(1:6, nrow = 3, ncol = 2))\n\nm[2,2]\nm[nrow(m), ncol(m) ]\n```\n\nDefining no entry will return the full dimension:\n```{r}\nm[2,]\nm[,1]\n```\n\n\n::: callout-note\nWhat will happen?\n```{r, eval=FALSE}\nm[1,,2]\nm[10]\n```\n:::\n\n\n\n\n\n\n## List\n\nA list is a collection of elements. These elements could be any object.\n```{r}\n(l <- list(1, \"2\", 1:3, list(m)))\n\n```\n\nAccess elements of a list with `[[...]]`.\n```{r}\nl[[2]]\n```\n\nA sub-list can be accessed with  `[...]`.\n```{r}\nl[1:3]\n```\n\n\n\n## List cont'd\nYou can define names for lists:\n```{r}\nl <- list(slot1 = 1:3, slot2 = c(\"a\", \"b\"), slot3 = l)\nnames(l)\n```\n\nAccess list elements using the name and a `$`:\n\n```{r}\nl$slot3 # return the original list l before overwriting it\n```\n\nDelete elements by assigning a `NULL` to a slot\n```{r}\nl[2:3] <- NULL\nl\n```\n\n\n\n## Data Frame\n\nA data frame is basically a list, where each element is a vector of the same length.\nHowever, it implements function to handle it as a matrix.\n\nLet's define a data set representing cars:\n```{r}\ncol <- as.factor(c(\"blue\", \"red\", \"blue\", \"red\", \"green\", \"black\", \"green\", \"white\"))\npri <- c(10, 20, 9, 50, 0.4, 15, 160, 60) * 1000\nis_el <- c(F,F,F,T,F,T,F,T)\n\ncar_ds <- data.frame(color = col, price = pri, is_electric = is_el)\ncar_ds\n\nstr(car_ds)\n```\n\n\n\n## Data Frame cont'd\n\nWe can work on a data set as we work with a matrix\n```{r}\n# All rows with red cars\ncar_ds[car_ds$color == \"red\", ]\n\n# price of all black cars\ncar_ds[car_ds$color == \"black\", \"price\"]\n\n# set a new price for the last car in the ds\ncar_ds[8, 2] <- 600\ncar_ds\n```\n\n\n\n\n## More on data structures\n\n-   A data frame behaves like a matrix.\n-   However, keep in mind that it is actually a list.\nWe can easily prove that:\n```{r}\nis.list(car_ds)\n```\n\nUse `str(...)` to check the data structure of *any* object:\n```{r}\nstr(car_ds)\nm <- matrix(1:4, ncol = 2)\nstr(m)\n```\n\n\n\n\n## Load data\n\nWe can load a data set from a package using `data(...)`.\n```{r}\ndata(\"iris\", package = \"datasets\")  # look in the environment variables\n```\n\nWe can load data from files. Use `read.table(...)`, or wrapper functions with reasonable default values. E.g. We can read a file directly from the web:\n```{r}\nd <- read.csv(\"https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/mtcars.csv\")\nhead(d)  # show the first few lines of a data set\n```\n\nNote, that we can also use this to read a data set from a local directory! To do that we have to specify either the full path or define the path from the **working directory**. Use `getwd(...)` and `setwd(...)` to get or set the current working directory. See next slide for an example.\n\n\n##  Save data sets\nConsider a data set, you have worked with. You can save it using write functions.\n```{r}\nwrite.csv(car_ds, file = \"example_data.csv\")  # we save our data set in the current working directory\n```\n\nWe can again read the data as a new object:\n```{r}\nd_loaded <- read.csv(\"example_data.csv\")\n\nall.equal(car_ds,d_loaded)  # test whether 2 (more complex) R object are the same\n```\n\n\n[**We can read other files as well. E.g. excel, SPSS, SAS, etc.**]{style=\"color:blue;\"}\n\nThere are a lot of packages to do that. \n\n[I use the function `load(...)` from the `rio` package that tries to unify a lot of different formats.]{style=\"color:rgba(255, 99, 71, 0.5);\"})\n\n\n\n## Save and load R objects\n\nSo far, we only worked with data frames for read and write operations. \nWe can save general `R` objects using `save(...)` and `load(...)` using the `.RData` format.\n```{r}\na_list <- list(a = 42, data = iris, comment = \"whatever\")\n\nsave(a_list, file = \"example_object.RData\")\n\nload(\"example_object.RData\")\n```\n\n\n\n\n\n\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","include-after-body":["clean_title_page.html"],"highlight-style":"github","output-file":"intro_R.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.55","auto-stretch":true,"title":"Intro intro R","author":"Raphael Rehms","editor":{"markdown":{"wrap":72}},"scrollable":true,"theme":"solarized","transition":"slide","footer":"Intro intro R","slideNumber":"c","fontsize":"25pt"}}},"projectFormats":["html"]}